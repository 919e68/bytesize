/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  mutation FetchAttachmentOcr {\n    ocr: fetchAttachmentOcr\n  }\n": typeof types.FetchAttachmentOcrDocument,
    "\n  mutation RemoveAttachment($id: ID!) {\n    attachment: removeAttachment(id: $id) {\n      id\n      attachableId\n      attachableType\n      filename\n      url\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.RemoveAttachmentDocument,
    "\n  mutation LoginUser($username: String!, $password: String!) {\n    auth: loginUser(username: $username, password: $password) {\n      token\n      expiresAt\n      user {\n        id\n        username\n\n        userType {\n          id\n          code\n          name\n        }\n      }\n    }\n  }\n": typeof types.LoginUserDocument,
    "\n  mutation LogoutUser {\n    auth: logoutUser\n  }\n": typeof types.LogoutUserDocument,
    "\n  mutation CreateBankTransfer($attributes: BankTransferAttributes!) {\n    bankTransfer: createBankTransfer(attributes: $attributes) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        code\n        accountName\n        accountNumber\n\n        bankType {\n          code\n        }\n      }\n\n      confirmedBy\n      isConfirmed\n\n      walletQueue {\n        id\n        code\n      }\n\n      transactionBank {\n        id\n        code\n        accountName\n        accountNumber\n\n        bankType {\n          code\n        }\n      }\n\n      amount\n      fee\n\n      transactionDate\n\n      sentRef\n      recvRef\n\n      transactionType\n      purpose\n      notes\n\n      attachments {\n        id\n        attachableType\n        attachableId\n        filename\n        url\n      }\n\n      walletQueue {\n        id\n        code\n      }\n\n      createdAt\n      updatedAt\n\n      inverseTransfer {\n        id\n\n        branch {\n          id\n          code\n          name\n        }\n\n        bank {\n          id\n          code\n          accountName\n          accountNumber\n\n          bankType {\n            code\n          }\n        }\n\n        confirmedBy\n        isConfirmed\n\n        walletQueue {\n          id\n          code\n        }\n\n        transactionBank {\n          id\n          code\n          accountName\n          accountNumber\n\n          bankType {\n            code\n          }\n        }\n\n        amount\n        fee\n\n        transactionDate\n\n        sentRef\n        recvRef\n\n        transactionType\n        purpose\n        notes\n\n        attachments {\n          id\n          attachableType\n          attachableId\n          filename\n          url\n        }\n\n        walletQueue {\n          id\n          code\n        }\n\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": typeof types.CreateBankTransferDocument,
    "\n  mutation RemoveBankTransfer($id: ID!) {\n    bankTransfer: removeBankTransfer(id: $id) {\n      id\n    }\n  }\n": typeof types.RemoveBankTransferDocument,
    "\n  mutation UpdateBankTransfer($id: ID!, $attributes: BankTransferAttributes!) {\n    bankTransfer: updateBankTransfer(id: $id, attributes: $attributes) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        code\n        accountName\n        accountNumber\n\n        bankType {\n          code\n        }\n      }\n\n      confirmedBy\n      isConfirmed\n\n      walletQueue {\n        id\n        code\n      }\n\n      transactionBank {\n        id\n        code\n        accountName\n        accountNumber\n\n        bankType {\n          code\n        }\n      }\n\n      amount\n      fee\n\n      transactionDate\n\n      sentRef\n      recvRef\n\n      transactionType\n      purpose\n      notes\n\n      attachments {\n        id\n        attachableType\n        attachableId\n        filename\n        url\n      }\n\n      walletQueue {\n        id\n        code\n      }\n\n      createdAt\n      updatedAt\n\n      inverseTransfer {\n        id\n\n        branch {\n          id\n          code\n          name\n        }\n\n        bank {\n          id\n          code\n          accountName\n          accountNumber\n\n          bankType {\n            code\n          }\n        }\n\n        confirmedBy\n        isConfirmed\n\n        walletQueue {\n          id\n          code\n        }\n\n        transactionBank {\n          id\n          code\n          accountName\n          accountNumber\n\n          bankType {\n            code\n          }\n        }\n\n        amount\n        fee\n\n        transactionDate\n\n        sentRef\n        recvRef\n\n        transactionType\n        purpose\n        notes\n\n        attachments {\n          id\n          attachableType\n          attachableId\n          filename\n          url\n        }\n\n        walletQueue {\n          id\n          code\n        }\n\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": typeof types.UpdateBankTransferDocument,
    "\n  mutation CreateBankType($attributes: BankTypeAttributes!) {\n    bankType: createBankType(attributes: $attributes) {\n      id\n      code\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.CreateBankTypeDocument,
    "\n  mutation RemoveBankType($id: ID!) {\n    bankType: removeBankType(id: $id) {\n      id\n      code\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.RemoveBankTypeDocument,
    "\n  mutation UpdateBankType($id: ID!, $attributes: BankTypeAttributes!) {\n    bankType: updateBankType(id: $id, attributes: $attributes) {\n      id\n      code\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpdateBankTypeDocument,
    "\n  mutation CreateBank($attributes: BankAttributes!) {\n    bank: createBank(attributes: $attributes) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      bankType {\n        id\n        code\n        name\n      }\n\n      activeWalletQueue {\n        id\n        code\n      }\n\n      code\n      phone\n      slot\n      merchantName\n      accountName\n      accountNumber\n      password\n      purpose\n      description\n      walletLimit\n      remainingLimit\n      isProcessor\n      isAllowed\n      isActive\n      isExternal\n      balance\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.CreateBankDocument,
    "\n  mutation RecomputeAllBank {\n    recompute: recomputeAllBank\n  }\n": typeof types.RecomputeAllBankDocument,
    "\n  mutation RecomputeBank($id: ID!) {\n    bank: recomputeBank(id: $id) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      bankType {\n        id\n        code\n        name\n      }\n\n      activeWalletQueue {\n        id\n        code\n      }\n\n      code\n      phone\n      slot\n      merchantName\n      accountName\n      accountNumber\n      password\n      purpose\n      description\n      walletLimit\n      remainingLimit\n      isProcessor\n      isActive\n      isExternal\n      isAllowed\n      balance\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.RecomputeBankDocument,
    "\n  mutation RemoveBank($id: ID!) {\n    bank: removeBank(id: $id) {\n      id\n    }\n  }\n": typeof types.RemoveBankDocument,
    "\n  mutation UpdateBank($id: ID!, $attributes: BankAttributes!) {\n    bank: updateBank(id: $id, attributes: $attributes) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      bankType {\n        id\n        code\n        name\n      }\n\n      activeWalletQueue {\n        id\n        code\n      }\n\n      code\n      phone\n      slot\n      merchantName\n      accountName\n      accountNumber\n      password\n      purpose\n      description\n      walletLimit\n      remainingLimit\n      isProcessor\n      isActive\n      isExternal\n      isAllowed\n      balance\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpdateBankDocument,
    "\n  mutation CreateBranch($attributes: BranchAttributes!) {\n    branch: createBranch(attributes: $attributes) {\n      id\n      name\n      code\n      description\n      contactPerson\n      contactNumber\n      contactEmail\n      depositQueue\n      depositQueueMultiplier\n      withdrawQueue\n      withdrawQueueMultiplier\n    }\n  }\n": typeof types.CreateBranchDocument,
    "\n  mutation RemoveBranch($id: ID!) {\n    branch: removeBranch(id: $id) {\n      id\n      name\n      code\n      description\n      contactPerson\n      contactNumber\n      contactEmail\n      depositQueue\n      depositQueueMultiplier\n      withdrawQueue\n      withdrawQueueMultiplier\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.RemoveBranchDocument,
    "\n  mutation UpdateBranch($id: ID!, $attributes: BranchAttributes!) {\n    branch: updateBranch(id: $id, attributes: $attributes) {\n      id\n      name\n      description\n      contactPerson\n      contactNumber\n      contactEmail\n      depositQueue\n      depositQueueMultiplier\n      withdrawQueue\n      withdrawQueueMultiplier\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpdateBranchDocument,
    "\n  mutation CreateClient($attributes: ClientAttributes!) {\n    client: createClient(attributes: $attributes) {\n      id\n      name\n      description\n      minDeposit\n      maxDeposit\n      minWithdraw\n      maxWithdraw\n      currency\n      depositRate\n      withdrawRate\n      depositCommission\n      withdrawCommission\n      isActive\n      enableDeposit\n      enableWithdraw\n      callbackUrl\n      redirectUrl\n      isSingleCallback\n      isAutoCallback\n      totalDeposit\n      totalWithdraw\n      totalDepositFee\n      totalWithdrawFee\n      totalTopup\n      totalSettlement\n      totalBalance\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.CreateClientDocument,
    "\n  mutation RemoveClient($id: ID!) {\n    client: removeClient(id: $id) {\n      id\n      name\n      description\n      minDeposit\n      maxDeposit\n      minWithdraw\n      maxWithdraw\n      currency\n      depositRate\n      withdrawRate\n      depositCommission\n      withdrawCommission\n      isActive\n      enableDeposit\n      enableWithdraw\n      callbackUrl\n      redirectUrl\n      isSingleCallback\n      isAutoCallback\n      totalDeposit\n      totalWithdraw\n      totalDepositFee\n      totalWithdrawFee\n      totalTopup\n      totalSettlement\n      totalBalance\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.RemoveClientDocument,
    "\n  mutation UpdateClient($id: ID!, $attributes: ClientAttributes!) {\n    client: updateClient(id: $id, attributes: $attributes) {\n      id\n      name\n      description\n      minDeposit\n      maxDeposit\n      minWithdraw\n      maxWithdraw\n      currency\n      depositRate\n      withdrawRate\n      depositCommission\n      withdrawCommission\n      isActive\n      enableDeposit\n      enableWithdraw\n      callbackUrl\n      redirectUrl\n      isSingleCallback\n      isAutoCallback\n      totalDeposit\n      totalWithdraw\n      totalDepositFee\n      totalWithdrawFee\n      totalTopup\n      totalSettlement\n      totalBalance\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpdateClientDocument,
    "\n  mutation CreateOption($attributes: OptionAttributes!) {\n    option: createOption(attributes: $attributes) {\n      id\n      optionableId\n      optionableType\n      fieldName\n      value\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.CreateOptionDocument,
    "\n  mutation UpdateOption($id: ID!, $attributes: OptionAttributes!) {\n    option: updateOption(id: $id, attributes: $attributes) {\n      id\n      optionableId\n      optionableType\n      fieldName\n      value\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpdateOptionDocument,
    "\n  mutation CreateSettlement($attributes: SettlementAttributes!) {\n    settlement: createSettlement(attributes: $attributes) {\n      id\n      client {\n        id\n        code\n        name\n      }\n      startsAt\n      endsAt\n      totalDeposit\n      totalWithdraw\n      depositRate\n      withdrawRate\n      depositFee\n      withdrawFee\n      totalSettlement\n      status\n      sent\n      balance\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.CreateSettlementDocument,
    "\n  mutation RemoveSettlement($id: ID!) {\n    settlement: removeSettlement(id: $id) {\n      id\n      client {\n        id\n        code\n        name\n      }\n      startsAt\n      endsAt\n      totalDeposit\n      totalWithdraw\n      depositRate\n      withdrawRate\n      depositFee\n      withdrawFee\n      totalSettlement\n      sent\n      balance\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.RemoveSettlementDocument,
    "\n  mutation UpdateSettlement($id: ID!, $attributes: SettlementAttributes!) {\n    settlement: updateSettlement(id: $id, attributes: $attributes) {\n      id\n      client {\n        id\n        code\n        name\n      }\n      startsAt\n      endsAt\n      totalDeposit\n      totalWithdraw\n      depositRate\n      withdrawRate\n      depositFee\n      withdrawFee\n      totalSettlement\n      status\n      sent\n      balance\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpdateSettlementDocument,
    "\n  mutation CreateSimCard($attributes: SimCardAttributes!) {\n    simCard: createSimCard(attributes: $attributes) {\n      id\n\n      branch {\n        id\n        name\n      }\n\n      name\n      mobileNumber\n      network\n      slot\n      isActive\n      lastLoadDate\n\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.CreateSimCardDocument,
    "\n  mutation RemoveSimCard($id: ID!) {\n    simCard: removeSimCard(id: $id) {\n      id\n    }\n  }\n": typeof types.RemoveSimCardDocument,
    "\n  mutation UpdateSimCard($id: ID!, $attributes: SimCardAttributes!) {\n    simCard: updateSimCard(id: $id, attributes: $attributes) {\n      id\n\n      branch {\n        id\n        name\n      }\n\n      name\n      mobileNumber\n      network\n      slot\n      isActive\n      lastLoadDate\n\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpdateSimCardDocument,
    "\n  mutation CreateSmsMessage($attributes: SmsMessageAttributes!) {\n    message: createSmsMessage(attributes: $attributes) {\n      id\n\n      smsNode {\n        id\n        code\n      }\n\n      client {\n        id\n        code\n      }\n\n      message\n      mobileNumber\n      sentAt\n      scheduledAt\n      retries\n      status\n    }\n  }\n": typeof types.CreateSmsMessageDocument,
    "\n  mutation CreateSmsNode($attributes: SmsNodeAttributes!) {\n    node: createSmsNode(attributes: $attributes) {\n      id\n      name\n      code\n      device\n      description\n      isActive\n      queued\n      updatedAt\n      createdAt\n    }\n  }\n": typeof types.CreateSmsNodeDocument,
    "\n  mutation RemoveSmsNode($id: ID!) {\n    node: removeSmsNode(id: $id) {\n      id\n    }\n  }\n": typeof types.RemoveSmsNodeDocument,
    "\n  mutation UpdateSmsNode($id: ID!, $attributes: SmsNodeAttributes!) {\n    node: updateSmsNode(id: $id, attributes: $attributes) {\n      id\n      name\n      code\n      device\n      description\n      isActive\n      queued\n      updatedAt\n      createdAt\n    }\n  }\n": typeof types.UpdateSmsNodeDocument,
    "\n  mutation CreateToken($attributes: TokenAttributes!) {\n    token: createToken(attributes: $attributes) {\n      id\n      clientToken\n      clientSecret\n      expiresAt\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.CreateTokenDocument,
    "\n  mutation RemoveToken($id: ID!) {\n    token: removeToken(id: $id) {\n      id\n      clientToken\n      clientSecret\n      expiresAt\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.RemoveTokenDocument,
    "\n  mutation UpdateToken($id: ID!, $attributes: TokenAttributes!) {\n    token: updateToken(id: $id, attributes: $attributes) {\n      id\n      clientToken\n      clientSecret\n      expiresAt\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpdateTokenDocument,
    "\n  mutation ResendCallback($id: ID!) {\n    resendCallback(id: $id)\n  }\n": typeof types.ResendCallbackDocument,
    "\n  mutation CreateTransaction($attributes: TransactionAttributes!) {\n    transaction: createTransaction(attributes: $attributes) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      client {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        accountNumber\n        accountName\n        code\n        bankType {\n          id\n          name\n          code\n        }\n      }\n\n      account {\n        id\n        name\n      }\n\n      walletQueue {\n        id\n      }\n\n      webpayToken {\n        id\n      }\n\n      claimReferenceNumber\n      transactionType\n      amount\n      fee\n      status\n      statusNotes\n      accountName\n      accountNumber\n      referenceCode\n      referenceNumber\n      isCallbackSent\n      callbackStatusSent\n      callbackStatusCode\n      callbackNotes\n      clientTransactionId\n      callbackUrl\n      redirectUrl\n      isWebpay\n      processedBy\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.CreateTransactionDocument,
    "\n  mutation TransferTransactions($walletQueueId: ID!, $transactionIds: [ID!]!) {\n    transactions: transferTransactions(walletQueueId: $walletQueueId, transactionIds: $transactionIds) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      client {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        accountNumber\n        accountName\n        code\n        bankType {\n          id\n          name\n          code\n        }\n      }\n\n      account {\n        id\n        name\n      }\n\n      walletQueue {\n        id\n      }\n\n      webpayToken {\n        id\n\n        client {\n          id\n          name\n        }\n\n        transactionRequest {\n          id\n        }\n\n        clientTransactionId\n        accountName\n        accountNumber\n        amount\n        fee\n        createdAt\n        updatedAt\n      }\n\n      claimReferenceNumber\n      transactionType\n      amount\n      fee\n      status\n      statusNotes\n      accountName\n      accountNumber\n      referenceCode\n      referenceNumber\n      isCallbackSent\n      callbackStatusSent\n      callbackStatusCode\n      callbackNotes\n      clientTransactionId\n      callbackUrl\n      redirectUrl\n      isWebpay\n      processedBy\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.TransferTransactionsDocument,
    "\n  mutation UpdateTransaction($id: ID!, $attributes: TransactionAttributes!) {\n    transaction: updateTransaction(id: $id, attributes: $attributes) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      client {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        accountNumber\n        accountName\n        code\n        bankType {\n          id\n          name\n          code\n        }\n      }\n\n      account {\n        id\n        name\n      }\n\n      walletQueue {\n        id\n      }\n\n      webpayToken {\n        id\n      }\n\n      claimReferenceNumber\n      transactionType\n      amount\n      fee\n      status\n      statusNotes\n      accountName\n      accountNumber\n      referenceCode\n      referenceNumber\n      isCallbackSent\n      callbackStatusSent\n      callbackStatusCode\n      callbackNotes\n      clientTransactionId\n      callbackUrl\n      redirectUrl\n      isWebpay\n      processedBy\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpdateTransactionDocument,
    "\n  mutation CreateUserType($attributes: UserTypeAttributes!) {\n    userType: createUserType(attributes: $attributes) {\n      id\n      code\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.CreateUserTypeDocument,
    "\n  mutation RemoveUserType($id: ID!) {\n    userType: removeUserType(id: $id) {\n      id\n      code\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.RemoveUserTypeDocument,
    "\n  mutation UpdateUserType($id: ID!, $attributes: UserTypeAttributes!) {\n    userType: updateUserType(id: $id, attributes: $attributes) {\n      id\n      code\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpdateUserTypeDocument,
    "\n  mutation CreateUser($attributes: UserAttributes!) {\n    user: createUser(attributes: $attributes) {\n      id\n\n      userType {\n        id\n        code\n        name\n      }\n\n      branch {\n        id\n        code\n        name\n      }\n\n      username\n      firstName\n      lastName\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.CreateUserDocument,
    "\n  mutation RemoveUser($id: ID!) {\n    user: removeUser(id: $id) {\n      id\n\n      userType {\n        id\n        code\n        name\n      }\n\n      branch {\n        id\n        code\n        name\n      }\n\n      username\n      firstName\n      lastName\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.RemoveUserDocument,
    "\n  mutation UpdateUser($id: ID!, $attributes: UserAttributes!) {\n    user: updateUser(id: $id, attributes: $attributes) {\n      id\n\n      userType {\n        id\n        code\n        name\n      }\n\n      branch {\n        id\n        code\n        name\n      }\n\n      username\n      firstName\n      lastName\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpdateUserDocument,
    "\n  mutation CreateWalletQueueItem($attributes: WalletQueueItemAttributes!) {\n    walletQueueItem: createWalletQueueItem(attributes: $attributes) {\n      id\n\n      walletQueue {\n        id\n        code\n        queueType\n        bank {\n          id\n          code\n          bankType {\n            id\n            code\n          }\n        }\n      }\n\n      matchedTransaction {\n        id\n      }\n\n      linkedWalletQueueItem {\n        id\n      }\n\n      transactionType\n      amount\n      accountNumber\n      accountName\n      referenceNumber\n      balance\n      code\n      transactionDate\n      status\n      notes\n      remarks\n      processedBy\n      createdAt\n      updatedAt\n\n      attachment {\n        id\n        url\n      }\n    }\n  }\n": typeof types.CreateWalletQueueItemDocument,
    "\n  mutation RemoveWalletQueueItem($id: ID!) {\n    walletQueueItem: removeWalletQueueItem(id: $id) {\n      id\n    }\n  }\n": typeof types.RemoveWalletQueueItemDocument,
    "\n  mutation UpdateWalletQueueItem($id: ID!, $attributes: WalletQueueItemAttributes!) {\n    walletQueueItem: updateWalletQueueItem(id: $id, attributes: $attributes) {\n      id\n\n      walletQueue {\n        id\n        code\n        queueType\n        bank {\n          id\n          code\n          bankType {\n            id\n            code\n          }\n        }\n      }\n\n      matchedTransaction {\n        id\n      }\n\n      linkedWalletQueueItem {\n        id\n      }\n\n      transactionType\n      amount\n      accountNumber\n      accountName\n      referenceNumber\n      balance\n      code\n      transactionDate\n      status\n      notes\n      remarks\n      processedBy\n      createdAt\n      updatedAt\n\n      attachment {\n        id\n        url\n      }\n    }\n  }\n": typeof types.UpdateWalletQueueItemDocument,
    "\n  mutation CreateWalletQueue($attributes: WalletQueueAttributes!) {\n    walletQueue: createWalletQueue(attributes: $attributes) {\n      id\n      code\n\n      branch {\n        id\n        code\n      }\n\n      bank {\n        id\n        code\n        phone\n        accountNumber\n        accountName\n        walletLimit\n        remainingLimit\n        phone\n        purpose\n\n        bankType {\n          code\n        }\n      }\n\n      clients {\n        id\n        code\n        name\n      }\n\n      queueType\n      startingBalance\n      endingBalance\n      totalAmount\n      totalSuccess\n      totalTransferIn\n      totalTransferOut\n      totalQueueAmount\n      queuedBy\n      processedBy\n      confirmedBy\n      notes\n      queue\n      isActive\n      interval\n      intervalCounter\n      intervalCounterLimit\n      intervalCountdown\n      status\n      isLocked\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.CreateWalletQueueDocument,
    "\n  mutation RecomputeWalletQueue($id: ID!) {\n    walletQueue: recomputeWalletQueue(id: $id) {\n      id\n      code\n\n      branch {\n        id\n        code\n      }\n\n      bank {\n        id\n        code\n        phone\n        accountNumber\n        accountName\n        walletLimit\n        remainingLimit\n        phone\n        purpose\n\n        bankType {\n          code\n        }\n      }\n\n      clients {\n        id\n        code\n        name\n      }\n\n      queueType\n      startingBalance\n      endingBalance\n      totalAmount\n      totalSuccess\n      totalTransferIn\n      totalTransferOut\n      totalQueueAmount\n      queuedBy\n      processedBy\n      confirmedBy\n      notes\n      queue\n      isActive\n      interval\n      intervalCounter\n      intervalCounterLimit\n      intervalCountdown\n      status\n      isLocked\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.RecomputeWalletQueueDocument,
    "\n  mutation removeWalletQueue($id: ID!) {\n    walletQueue: removeWalletQueue(id: $id) {\n      id\n    }\n  }\n": typeof types.RemoveWalletQueueDocument,
    "\n  mutation UpdateWalletQueue($id: ID!, $attributes: WalletQueueAttributes!) {\n    walletQueue: updateWalletQueue(id: $id, attributes: $attributes) {\n      id\n      code\n\n      branch {\n        id\n        code\n      }\n\n      bank {\n        id\n        code\n        phone\n        accountNumber\n        accountName\n        walletLimit\n        remainingLimit\n        phone\n        purpose\n\n        bankType {\n          code\n        }\n      }\n\n      clients {\n        id\n        code\n        name\n      }\n\n      queueType\n      startingBalance\n      endingBalance\n      totalAmount\n      totalSuccess\n      totalTransferIn\n      totalTransferOut\n      totalQueueAmount\n      queuedBy\n      processedBy\n      confirmedBy\n      notes\n      queue\n      isActive\n      interval\n      intervalCounter\n      intervalCounterLimit\n      intervalCountdown\n      status\n      isLocked\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpdateWalletQueueDocument,
    "\n  mutation CreateWhitelistedIp($attributes: WhitelistedIpAttributes!) {\n    whitelistedIp: createWhitelistedIp(attributes: $attributes) {\n      id\n\n      client {\n        id\n        name\n      }\n\n      ipAddress\n      isAllowed\n      description\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.CreateWhitelistedIpDocument,
    "\n  mutation RemoveWhitelistedIp($id: ID!) {\n    whitelistedIp: removeWhitelistedIp(id: $id) {\n      id\n\n      client {\n        id\n        name\n      }\n\n      ipAddress\n      isAllowed\n      description\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.RemoveWhitelistedIpDocument,
    "\n  mutation UpdateWhitelistedIp($id: ID!, $attributes: WhitelistedIpAttributes!) {\n    whitelistedIp: updateWhitelistedIp(id: $id, attributes: $attributes) {\n      id\n\n      client {\n        id\n        name\n      }\n\n      ipAddress\n      isAllowed\n      description\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpdateWhitelistedIpDocument,
    "\n  query CurrentUser {\n    user: fetchCurrentUser {\n      id\n      username\n      email\n      firstName\n      lastName\n\n      userType {\n        id\n        code\n        name\n      }\n\n      branchId\n      clientId\n    }\n  }\n": typeof types.CurrentUserDocument,
    "\n  query FetchBankTransfer($id: ID!) {\n    bankTransfer: fetchBankTransfer(id: $id) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        code\n        accountName\n        accountNumber\n\n        bankType {\n          code\n        }\n      }\n\n      confirmedBy\n      isConfirmed\n\n      walletQueue {\n        id\n        code\n      }\n\n      transactionBank {\n        id\n        code\n        accountName\n        accountNumber\n\n        bankType {\n          code\n        }\n      }\n\n      amount\n      fee\n\n      transactionDate\n\n      sentRef\n      recvRef\n\n      transactionType\n      purpose\n      notes\n\n      attachments {\n        id\n        attachableType\n        attachableId\n        filename\n        url\n      }\n\n      walletQueue {\n        id\n        code\n      }\n\n      createdAt\n      updatedAt\n\n      inverseTransfer {\n        id\n\n        branch {\n          id\n          code\n          name\n        }\n\n        bank {\n          id\n          code\n          accountName\n          accountNumber\n\n          bankType {\n            code\n          }\n        }\n\n        confirmedBy\n        isConfirmed\n\n        walletQueue {\n          id\n          code\n        }\n\n        transactionBank {\n          id\n          code\n          accountName\n          accountNumber\n\n          bankType {\n            code\n          }\n        }\n\n        amount\n        fee\n\n        transactionDate\n\n        sentRef\n        recvRef\n\n        transactionType\n        purpose\n        notes\n\n        attachments {\n          id\n          attachableType\n          attachableId\n          filename\n          url\n        }\n\n        walletQueue {\n          id\n          code\n        }\n\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": typeof types.FetchBankTransferDocument,
    "\n  query FetchBankTransfers($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    bankTransfers: fetchBankTransfers(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        branch {\n          id\n          code\n          name\n        }\n\n        bank {\n          id\n          code\n          accountName\n          accountNumber\n\n          bankType {\n            code\n          }\n        }\n\n        confirmedBy\n        isConfirmed\n\n        walletQueue {\n          id\n          code\n        }\n\n        transactionBank {\n          id\n          code\n          accountName\n          accountNumber\n\n          bankType {\n            code\n          }\n        }\n\n        amount\n        fee\n\n        transactionDate\n\n        sentRef\n        recvRef\n\n        transactionType\n        purpose\n        notes\n\n        attachments {\n          id\n          attachableType\n          attachableId\n          filename\n          url\n        }\n\n        walletQueue {\n          id\n          code\n        }\n\n        createdAt\n        updatedAt\n\n        inverseTransfer {\n          id\n\n          branch {\n            id\n            code\n            name\n          }\n\n          bank {\n            id\n            code\n            accountName\n            accountNumber\n\n            bankType {\n              code\n            }\n          }\n\n          confirmedBy\n          isConfirmed\n\n          walletQueue {\n            id\n            code\n          }\n\n          transactionBank {\n            id\n            code\n            accountName\n            accountNumber\n\n            bankType {\n              code\n            }\n          }\n\n          amount\n          fee\n\n          transactionDate\n\n          sentRef\n          recvRef\n\n          transactionType\n          purpose\n          notes\n\n          attachments {\n            id\n            attachableType\n            attachableId\n            filename\n            url\n          }\n\n          walletQueue {\n            id\n            code\n          }\n\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n": typeof types.FetchBankTransfersDocument,
    "\n  query FetchBankType($id: ID!) {\n    bankType: fetchBankType(id: $id) {\n      id\n      code\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.FetchBankTypeDocument,
    "\n  query FetchBankTypes($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    bankTypes: fetchBankTypes(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        code\n        name\n        description\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": typeof types.FetchBankTypesDocument,
    "\n  query FetchBank($id: ID!) {\n    bank: fetchBank(id: $id) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      bankType {\n        id\n        code\n        name\n      }\n\n      activeWalletQueue {\n        id\n        code\n      }\n\n      code\n      phone\n      slot\n      merchantName\n      accountName\n      accountNumber\n      password\n      purpose\n      description\n      walletLimit\n      remainingLimit\n      isProcessor\n      isActive\n      isExternal\n      isAllowed\n      balance\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.FetchBankDocument,
    "\n  query FetchBanks($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    banks: fetchBanks(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        branch {\n          id\n          code\n          name\n        }\n\n        bankType {\n          id\n          code\n          name\n        }\n\n        activeWalletQueue {\n          id\n          code\n        }\n\n        code\n        phone\n        slot\n        merchantName\n        accountName\n        accountNumber\n        password\n        purpose\n        description\n        walletLimit\n        remainingLimit\n        isProcessor\n        isActive\n        isExternal\n        isAllowed\n        balance\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": typeof types.FetchBanksDocument,
    "\n  query FetchBranch($id: ID!) {\n    branch: fetchBranch(id: $id) {\n      id\n      code\n      name\n      description\n      contactPerson\n      contactNumber\n      contactEmail\n      depositQueue\n      depositQueueMultiplier\n      withdrawQueue\n      withdrawQueueMultiplier\n      balance\n      createdAt\n      updatedAt\n\n      options {\n        id\n        fieldName\n        value\n      }\n    }\n  }\n": typeof types.FetchBranchDocument,
    "\n  query FetchBranches($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    branches: fetchBranches(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        code\n        name\n        description\n        contactPerson\n        contactNumber\n        contactEmail\n        depositQueue\n        depositQueueMultiplier\n        withdrawQueue\n        withdrawQueueMultiplier\n        balance\n        createdAt\n        updatedAt\n\n        options {\n          id\n          fieldName\n          value\n        }\n      }\n    }\n  }\n": typeof types.FetchBranchesDocument,
    "\n  query FetchClientToken($id: ID!) {\n    clientToken: fetchClientToken(id: $id) {\n      id\n\n      client {\n        id\n        name\n      }\n\n      token {\n        id\n        clientToken\n        clientSecret\n        expiresAt\n      }\n\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.FetchClientTokenDocument,
    "\n  query FetchClientTokens($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    clientTokens: fetchClientTokens(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        client {\n          id\n          name\n        }\n\n        token {\n          id\n          clientToken\n          clientSecret\n          expiresAt\n        }\n\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": typeof types.FetchClientTokensDocument,
    "\n  query FetchClient($id: ID!) {\n    client: fetchClient(id: $id) {\n      id\n      code\n      name\n      description\n      minDeposit\n      maxDeposit\n      minWithdraw\n      maxWithdraw\n      currency\n      depositRate\n      withdrawRate\n      depositCommission\n      withdrawCommission\n      isActive\n      enableDeposit\n      enableWithdraw\n      callbackUrl\n      redirectUrl\n      isSingleCallback\n      isAutoCallback\n      totalDeposit\n      totalWithdraw\n      totalDepositFee\n      totalWithdrawFee\n      totalTopup\n      totalSettlement\n      totalBalance\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.FetchClientDocument,
    "\n  query FetchClients($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    clients: fetchClients(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        code\n        name\n        description\n        minDeposit\n        maxDeposit\n        minWithdraw\n        maxWithdraw\n        currency\n        depositRate\n        withdrawRate\n        depositCommission\n        withdrawCommission\n        isActive\n        enableDeposit\n        enableWithdraw\n        callbackUrl\n        redirectUrl\n        isSingleCallback\n        isAutoCallback\n        totalDeposit\n        totalWithdraw\n        totalDepositFee\n        totalWithdrawFee\n        totalTopup\n        totalSettlement\n        totalBalance\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": typeof types.FetchClientsDocument,
    "\n  query FetchClientDashboard {\n    dashboard: fetchClientDashboard\n  }\n": typeof types.FetchClientDashboardDocument,
    "\n  query FetchOption($id: ID!) {\n    option: fetchOption(id: $id) {\n      id\n      optionableId\n      optionableType\n      fieldName\n      value\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.FetchOptionDocument,
    "\n  query FetchOptions($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    options: fetchOptions(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        optionableType\n        optionableId\n        fieldName\n        value\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": typeof types.FetchOptionsDocument,
    "\n  query FetchSettlement($id: ID!) {\n    settlement: fetchSettlement(id: $id) {\n      id\n      client {\n        id\n        code\n        name\n      }\n      startsAt\n      endsAt\n      totalDeposit\n      totalWithdraw\n      depositRate\n      withdrawRate\n      depositFee\n      withdrawFee\n      totalSettlement\n      status\n      sent\n      balance\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.FetchSettlementDocument,
    "\n  query FetchSettlements($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    settlements: fetchSettlements(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        client {\n          id\n          code\n          name\n        }\n\n        startsAt\n        endsAt\n        totalDeposit\n        totalWithdraw\n        depositRate\n        withdrawRate\n        depositFee\n        withdrawFee\n        totalSettlement\n        status\n        sent\n        balance\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": typeof types.FetchSettlementsDocument,
    "\n  query FetchSimCard($id: ID!) {\n    simCard: fetchSimCard(id: $id) {\n      id\n\n      branch {\n        id\n        name\n      }\n\n      name\n      mobileNumber\n      network\n      slot\n      isActive\n      lastLoadDate\n\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.FetchSimCardDocument,
    "\n  query FetchSimCards($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    simCards: fetchSimCards(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        branch {\n          id\n          name\n        }\n\n        name\n        mobileNumber\n        network\n        slot\n        isActive\n        lastLoadDate\n\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": typeof types.FetchSimCardsDocument,
    "\n  query FetchSmsMessage($id: ID!) {\n    message: fetchSmsMessage(id: $id) {\n      id\n      smsNode {\n        id\n        code\n      }\n      client {\n        id\n        name\n        code\n      }\n      message\n      mobileNumber\n      sentAt\n      scheduledAt\n      status\n      isInstant\n      retries\n      createdAt\n    }\n  }\n": typeof types.FetchSmsMessageDocument,
    "\n  query FetchSmsMessages($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    smsMessages: fetchSmsMessages(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        smsNode {\n          id\n          code\n        }\n        client {\n          id\n          name\n          code\n        }\n        message\n        mobileNumber\n        sentAt\n        scheduledAt\n        status\n        isInstant\n        retries\n        createdAt\n      }\n    }\n  }\n": typeof types.FetchSmsMessagesDocument,
    "\n  query FetchSmsNode($id: ID!) {\n    smsNode: fetchSmsNode(id: $id) {\n      id\n      name\n      code\n      device\n      description\n      isActive\n      queued\n      updatedAt\n      createdAt\n    }\n  }\n": typeof types.FetchSmsNodeDocument,
    "\n  query FetchSmsNodes($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    smsNodes: fetchSmsNodes(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        name\n        code\n        device\n        description\n        isActive\n        queued\n        updatedAt\n        createdAt\n      }\n    }\n  }\n": typeof types.FetchSmsNodesDocument,
    "\n  query FetchToken($id: ID!) {\n    token: fetchToken(id: $id) {\n      id\n      clientToken\n      clientSecret\n      expiresAt\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.FetchTokenDocument,
    "\n  query FetchTokens($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    tokens: fetchTokens(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        clientToken\n        clientSecret\n        expiresAt\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": typeof types.FetchTokensDocument,
    "\n  query FetchTransactionCallback($id: ID!) {\n    transactionCallback: fetchTransactionCallback(id: $id) {\n      id\n      url\n      requestBody\n      responseCode\n      responseBody\n      sender\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.FetchTransactionCallbackDocument,
    "\n  query FetchTransactionCallbacks(\n    $filters: [FilterInput!]\n    $order: [OrderInput!]\n    $page: Int\n    $limit: Int\n  ) {\n    transactionCallbacks: fetchTransactionCallbacks(\n      filters: $filters\n      order: $order\n      page: $page\n      limit: $limit\n    ) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        url\n        requestBody\n        responseCode\n        responseBody\n        sender\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": typeof types.FetchTransactionCallbacksDocument,
    "\n  query FetchTransaction($id: ID!) {\n    transaction: fetchTransaction(id: $id) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      client {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        accountNumber\n        accountName\n        code\n        bankType {\n          id\n          name\n          code\n        }\n      }\n\n      account {\n        id\n        name\n      }\n\n      walletQueue {\n        id\n        code\n      }\n\n      webpayToken {\n        id\n\n        client {\n          id\n          name\n        }\n\n        transactionRequest {\n          id\n        }\n\n        clientTransactionId\n        accountName\n        accountNumber\n        amount\n        fee\n        createdAt\n        updatedAt\n      }\n\n      claimReferenceNumber\n      transactionType\n      amount\n      fee\n      status\n      statusNotes\n      accountName\n      accountNumber\n      referenceCode\n      referenceNumber\n      isCallbackSent\n      callbackStatusSent\n      callbackStatusCode\n      callbackNotes\n      clientTransactionId\n      callbackUrl\n      redirectUrl\n      isWebpay\n      processedBy\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.FetchTransactionDocument,
    "\n  query FetchTransactions($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    transactions: fetchTransactions(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        branch {\n          id\n          code\n          name\n        }\n\n        client {\n          id\n          code\n          name\n        }\n\n        bank {\n          id\n          accountNumber\n          accountName\n          code\n          bankType {\n            id\n            name\n            code\n          }\n        }\n\n        account {\n          id\n          name\n        }\n\n        walletQueue {\n          id\n          code\n        }\n\n        webpayToken {\n          id\n\n          client {\n            id\n            name\n          }\n\n          transactionRequest {\n            id\n          }\n\n          clientTransactionId\n          accountName\n          accountNumber\n          amount\n          fee\n          createdAt\n          updatedAt\n        }\n\n        claimReferenceNumber\n        transactionType\n        amount\n        fee\n        status\n        statusNotes\n        accountName\n        accountNumber\n        referenceCode\n        referenceNumber\n        isCallbackSent\n        callbackStatusSent\n        callbackStatusCode\n        callbackNotes\n        clientTransactionId\n        callbackUrl\n        redirectUrl\n        isWebpay\n        processedBy\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": typeof types.FetchTransactionsDocument,
    "\n  query FetchUserType($id: ID!) {\n    userType: fetchUserType(id: $id) {\n      id\n      code\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.FetchUserTypeDocument,
    "\n  query FetchUserTypes($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    userTypes: fetchUserTypes(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n      nodes {\n        id\n        code\n        name\n        description\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": typeof types.FetchUserTypesDocument,
    "\n  query FetchUser($id: ID!) {\n    user: fetchUser(id: $id) {\n      id\n\n      userType {\n        id\n        code\n        name\n      }\n\n      branch {\n        id\n        code\n        name\n      }\n\n      username\n      firstName\n      lastName\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.FetchUserDocument,
    "\n  query FetchUsers($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    users: fetchUsers(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        userType {\n          id\n          code\n          name\n        }\n\n        branch {\n          id\n          code\n          name\n        }\n\n        username\n        firstName\n        lastName\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": typeof types.FetchUsersDocument,
    "\n  query FetchWalletQueueItem($id: ID!) {\n    walletQueueItem: fetchWalletQueueItem(id: $id) {\n      id\n\n      walletQueue {\n        id\n        code\n        queueType\n        bank {\n          id\n          code\n          bankType {\n            id\n            code\n          }\n        }\n      }\n\n      matchedTransaction {\n        id\n      }\n\n      linkedWalletQueueItem {\n        id\n      }\n\n      transactionType\n      amount\n      accountNumber\n      accountName\n      referenceNumber\n      balance\n      code\n      transactionDate\n      status\n      notes\n      remarks\n      processedBy\n      createdAt\n      updatedAt\n\n      attachment {\n        id\n        url\n      }\n    }\n  }\n": typeof types.FetchWalletQueueItemDocument,
    "\n  query FetchWalletQueueItems($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    walletQueueItems: fetchWalletQueueItems(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        walletQueue {\n          id\n          code\n          queueType\n          bank {\n            id\n            code\n            bankType {\n              id\n              code\n            }\n          }\n        }\n\n        matchedTransaction {\n          id\n        }\n\n        linkedWalletQueueItem {\n          id\n        }\n\n        transactionType\n        amount\n        accountNumber\n        accountName\n        referenceNumber\n        balance\n        code\n        transactionDate\n        status\n        notes\n        remarks\n        processedBy\n        createdAt\n        updatedAt\n\n        attachment {\n          id\n          url\n        }\n      }\n    }\n  }\n": typeof types.FetchWalletQueueItemsDocument,
    "\n  query FetchWalletQueue($id: ID!) {\n    walletQueue: fetchWalletQueue(id: $id) {\n      id\n      code\n\n      branch {\n        id\n        code\n      }\n\n      bank {\n        id\n        code\n        phone\n        accountNumber\n        accountName\n        walletLimit\n        remainingLimit\n        phone\n        purpose\n\n        bankType {\n          code\n        }\n      }\n\n      clients {\n        id\n        code\n        name\n      }\n\n      queueType\n      startingBalance\n      endingBalance\n      totalAmount\n      totalSuccess\n      totalTransferIn\n      totalTransferOut\n      totalQueueAmount\n      queuedBy\n      processedBy\n      confirmedBy\n      notes\n      queue\n      isActive\n      interval\n      intervalCounter\n      intervalCounterLimit\n      intervalCountdown\n      status\n      isLocked\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.FetchWalletQueueDocument,
    "\n  query FetchWalletQueues($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    walletQueues: fetchWalletQueues(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        code\n\n        branch {\n          id\n          code\n        }\n\n        bank {\n          id\n          code\n          phone\n          accountNumber\n          accountName\n          walletLimit\n          remainingLimit\n          phone\n          purpose\n\n          bankType {\n            code\n          }\n        }\n\n        clients {\n          id\n          code\n          name\n        }\n\n        queueType\n        startingBalance\n        endingBalance\n        totalAmount\n        totalSuccess\n        totalTransferIn\n        totalTransferOut\n        totalQueueAmount\n        queuedBy\n        processedBy\n        confirmedBy\n        notes\n        queue\n        isActive\n        interval\n        intervalCounter\n        intervalCounterLimit\n        intervalCountdown\n        status\n        isLocked\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": typeof types.FetchWalletQueuesDocument,
    "\n  query FetchWebpayToken($id: ID!) {\n    webpayToken: fetchWebpayToken(id: $id) {\n      id\n\n      client {\n        id\n        code\n        name\n      }\n\n      transactionRequest {\n        id\n      }\n\n      merchantName\n      accountName\n      accountNumber\n      amount\n      fee\n      clientTransactionId\n      clientNotes\n      callbackUrl\n      redirectUrl\n      expiresAt\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.FetchWebpayTokenDocument,
    "\n  query FetchWebpayTokens($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    webpayTokens: fetchWebpayTokens(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        client {\n          id\n          code\n          name\n        }\n\n        transactionRequest {\n          id\n        }\n\n        merchantName\n        accountName\n        accountNumber\n        amount\n        fee\n        clientTransactionId\n        clientNotes\n        callbackUrl\n        redirectUrl\n        expiresAt\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": typeof types.FetchWebpayTokensDocument,
    "\n  query FetchWhitelistedIp($id: ID!) {\n    whitelistedIp: fetchWhitelistedIp(id: $id) {\n      id\n\n      client {\n        id\n        name\n      }\n\n      ipAddress\n      isAllowed\n      description\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.FetchWhitelistedIpDocument,
    "\n  query FetchWhitelistedIps(\n    $filters: [FilterInput!]\n    $order: [OrderInput!]\n    $page: Int\n    $limit: Int\n  ) {\n    whitelistedIps: fetchWhitelistedIps(\n      filters: $filters\n      order: $order\n      page: $page\n      limit: $limit\n    ) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        client {\n          id\n          name\n        }\n\n        ipAddress\n        isAllowed\n        description\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": typeof types.FetchWhitelistedIpsDocument,
    "\n  subscription CreateTransactionUpdates($branchId: ID, $clientId: ID, $walletQueueId: ID) {\n    transaction: createTransactionUpdates(\n      branchId: $branchId\n      clientId: $clientId\n      walletQueueId: $walletQueueId\n    ) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      client {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        accountNumber\n        accountName\n        code\n        bankType {\n          id\n          name\n          code\n        }\n      }\n\n      account {\n        id\n        name\n      }\n\n      walletQueue {\n        id\n      }\n\n      claimReferenceNumber\n      transactionType\n      amount\n      fee\n      status\n      statusNotes\n      accountName\n      accountNumber\n      referenceCode\n      referenceNumber\n      isCallbackSent\n      callbackStatusSent\n      callbackStatusCode\n      callbackNotes\n      clientTransactionId\n      callbackUrl\n      redirectUrl\n      isWebpay\n      processedBy\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.CreateTransactionUpdatesDocument,
    "\n  subscription FetchTransactionsUpdates($branchId: ID, $clientId: ID, $walletQueueId: ID) {\n    transaction: fetchTransactionsUpdates(\n      branchId: $branchId\n      clientId: $clientId\n      walletQueueId: $walletQueueId\n    ) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      client {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        accountNumber\n        accountName\n        code\n        bankType {\n          id\n          name\n          code\n        }\n      }\n\n      account {\n        id\n        name\n      }\n\n      walletQueue {\n        id\n      }\n\n      claimReferenceNumber\n      transactionType\n      amount\n      fee\n      status\n      statusNotes\n      accountName\n      accountNumber\n      referenceCode\n      referenceNumber\n      isCallbackSent\n      callbackStatusSent\n      callbackStatusCode\n      callbackNotes\n      clientTransactionId\n      callbackUrl\n      redirectUrl\n      isWebpay\n      processedBy\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.FetchTransactionsUpdatesDocument,
    "\n  subscription CreateWalletQueueItemUpdates($walletQueueId: ID) {\n    walletQueueItem: createWalletQueueItemUpdates(walletQueueId: $walletQueueId) {\n      id\n\n      walletQueue {\n        id\n        code\n        queueType\n        bank {\n          id\n          code\n          bankType {\n            id\n            code\n          }\n        }\n      }\n\n      matchedTransaction {\n        id\n      }\n\n      transactionType\n      amount\n      accountNumber\n      accountName\n      referenceNumber\n      balance\n      code\n      transactionDate\n      status\n      notes\n      remarks\n      processedBy\n      createdAt\n      updatedAt\n\n      attachment {\n        id\n        url\n      }\n    }\n  }\n": typeof types.CreateWalletQueueItemUpdatesDocument,
    "\n  subscription FetchWalletQueueUpdates($id: ID!) {\n    walletQueue: fetchWalletQueueUpdates(id: $id) {\n      id\n      code\n\n      branch {\n        id\n        code\n      }\n\n      bank {\n        id\n        code\n        phone\n        accountNumber\n        accountName\n        walletLimit\n        remainingLimit\n        phone\n        purpose\n\n        bankType {\n          code\n        }\n      }\n\n      clients {\n        id\n        code\n        name\n      }\n\n      queueType\n      startingBalance\n      endingBalance\n      totalAmount\n      totalSuccess\n      totalTransferIn\n      totalTransferOut\n      totalQueueAmount\n      queuedBy\n      processedBy\n      confirmedBy\n      notes\n      queue\n      isActive\n      interval\n      intervalCounter\n      intervalCounterLimit\n      intervalCountdown\n      status\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.FetchWalletQueueUpdatesDocument,
    "\n  subscription FetchWalletQueuesUpdates($branchId: ID) {\n    walletQueue: fetchWalletQueuesUpdates(branchId: $branchId) {\n      id\n      code\n\n      branch {\n        id\n        code\n      }\n\n      bank {\n        id\n        code\n        phone\n        accountNumber\n        accountName\n        walletLimit\n        remainingLimit\n        phone\n        purpose\n\n        bankType {\n          code\n        }\n      }\n\n      clients {\n        id\n        code\n        name\n      }\n\n      queueType\n      startingBalance\n      endingBalance\n      totalAmount\n      totalSuccess\n      totalTransferIn\n      totalTransferOut\n      totalQueueAmount\n      queuedBy\n      processedBy\n      confirmedBy\n      notes\n      queue\n      isActive\n      interval\n      intervalCounter\n      intervalCounterLimit\n      intervalCountdown\n      status\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.FetchWalletQueuesUpdatesDocument,
};
const documents: Documents = {
    "\n  mutation FetchAttachmentOcr {\n    ocr: fetchAttachmentOcr\n  }\n": types.FetchAttachmentOcrDocument,
    "\n  mutation RemoveAttachment($id: ID!) {\n    attachment: removeAttachment(id: $id) {\n      id\n      attachableId\n      attachableType\n      filename\n      url\n      createdAt\n      updatedAt\n    }\n  }\n": types.RemoveAttachmentDocument,
    "\n  mutation LoginUser($username: String!, $password: String!) {\n    auth: loginUser(username: $username, password: $password) {\n      token\n      expiresAt\n      user {\n        id\n        username\n\n        userType {\n          id\n          code\n          name\n        }\n      }\n    }\n  }\n": types.LoginUserDocument,
    "\n  mutation LogoutUser {\n    auth: logoutUser\n  }\n": types.LogoutUserDocument,
    "\n  mutation CreateBankTransfer($attributes: BankTransferAttributes!) {\n    bankTransfer: createBankTransfer(attributes: $attributes) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        code\n        accountName\n        accountNumber\n\n        bankType {\n          code\n        }\n      }\n\n      confirmedBy\n      isConfirmed\n\n      walletQueue {\n        id\n        code\n      }\n\n      transactionBank {\n        id\n        code\n        accountName\n        accountNumber\n\n        bankType {\n          code\n        }\n      }\n\n      amount\n      fee\n\n      transactionDate\n\n      sentRef\n      recvRef\n\n      transactionType\n      purpose\n      notes\n\n      attachments {\n        id\n        attachableType\n        attachableId\n        filename\n        url\n      }\n\n      walletQueue {\n        id\n        code\n      }\n\n      createdAt\n      updatedAt\n\n      inverseTransfer {\n        id\n\n        branch {\n          id\n          code\n          name\n        }\n\n        bank {\n          id\n          code\n          accountName\n          accountNumber\n\n          bankType {\n            code\n          }\n        }\n\n        confirmedBy\n        isConfirmed\n\n        walletQueue {\n          id\n          code\n        }\n\n        transactionBank {\n          id\n          code\n          accountName\n          accountNumber\n\n          bankType {\n            code\n          }\n        }\n\n        amount\n        fee\n\n        transactionDate\n\n        sentRef\n        recvRef\n\n        transactionType\n        purpose\n        notes\n\n        attachments {\n          id\n          attachableType\n          attachableId\n          filename\n          url\n        }\n\n        walletQueue {\n          id\n          code\n        }\n\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.CreateBankTransferDocument,
    "\n  mutation RemoveBankTransfer($id: ID!) {\n    bankTransfer: removeBankTransfer(id: $id) {\n      id\n    }\n  }\n": types.RemoveBankTransferDocument,
    "\n  mutation UpdateBankTransfer($id: ID!, $attributes: BankTransferAttributes!) {\n    bankTransfer: updateBankTransfer(id: $id, attributes: $attributes) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        code\n        accountName\n        accountNumber\n\n        bankType {\n          code\n        }\n      }\n\n      confirmedBy\n      isConfirmed\n\n      walletQueue {\n        id\n        code\n      }\n\n      transactionBank {\n        id\n        code\n        accountName\n        accountNumber\n\n        bankType {\n          code\n        }\n      }\n\n      amount\n      fee\n\n      transactionDate\n\n      sentRef\n      recvRef\n\n      transactionType\n      purpose\n      notes\n\n      attachments {\n        id\n        attachableType\n        attachableId\n        filename\n        url\n      }\n\n      walletQueue {\n        id\n        code\n      }\n\n      createdAt\n      updatedAt\n\n      inverseTransfer {\n        id\n\n        branch {\n          id\n          code\n          name\n        }\n\n        bank {\n          id\n          code\n          accountName\n          accountNumber\n\n          bankType {\n            code\n          }\n        }\n\n        confirmedBy\n        isConfirmed\n\n        walletQueue {\n          id\n          code\n        }\n\n        transactionBank {\n          id\n          code\n          accountName\n          accountNumber\n\n          bankType {\n            code\n          }\n        }\n\n        amount\n        fee\n\n        transactionDate\n\n        sentRef\n        recvRef\n\n        transactionType\n        purpose\n        notes\n\n        attachments {\n          id\n          attachableType\n          attachableId\n          filename\n          url\n        }\n\n        walletQueue {\n          id\n          code\n        }\n\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.UpdateBankTransferDocument,
    "\n  mutation CreateBankType($attributes: BankTypeAttributes!) {\n    bankType: createBankType(attributes: $attributes) {\n      id\n      code\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n": types.CreateBankTypeDocument,
    "\n  mutation RemoveBankType($id: ID!) {\n    bankType: removeBankType(id: $id) {\n      id\n      code\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n": types.RemoveBankTypeDocument,
    "\n  mutation UpdateBankType($id: ID!, $attributes: BankTypeAttributes!) {\n    bankType: updateBankType(id: $id, attributes: $attributes) {\n      id\n      code\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpdateBankTypeDocument,
    "\n  mutation CreateBank($attributes: BankAttributes!) {\n    bank: createBank(attributes: $attributes) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      bankType {\n        id\n        code\n        name\n      }\n\n      activeWalletQueue {\n        id\n        code\n      }\n\n      code\n      phone\n      slot\n      merchantName\n      accountName\n      accountNumber\n      password\n      purpose\n      description\n      walletLimit\n      remainingLimit\n      isProcessor\n      isAllowed\n      isActive\n      isExternal\n      balance\n      createdAt\n      updatedAt\n    }\n  }\n": types.CreateBankDocument,
    "\n  mutation RecomputeAllBank {\n    recompute: recomputeAllBank\n  }\n": types.RecomputeAllBankDocument,
    "\n  mutation RecomputeBank($id: ID!) {\n    bank: recomputeBank(id: $id) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      bankType {\n        id\n        code\n        name\n      }\n\n      activeWalletQueue {\n        id\n        code\n      }\n\n      code\n      phone\n      slot\n      merchantName\n      accountName\n      accountNumber\n      password\n      purpose\n      description\n      walletLimit\n      remainingLimit\n      isProcessor\n      isActive\n      isExternal\n      isAllowed\n      balance\n      createdAt\n      updatedAt\n    }\n  }\n": types.RecomputeBankDocument,
    "\n  mutation RemoveBank($id: ID!) {\n    bank: removeBank(id: $id) {\n      id\n    }\n  }\n": types.RemoveBankDocument,
    "\n  mutation UpdateBank($id: ID!, $attributes: BankAttributes!) {\n    bank: updateBank(id: $id, attributes: $attributes) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      bankType {\n        id\n        code\n        name\n      }\n\n      activeWalletQueue {\n        id\n        code\n      }\n\n      code\n      phone\n      slot\n      merchantName\n      accountName\n      accountNumber\n      password\n      purpose\n      description\n      walletLimit\n      remainingLimit\n      isProcessor\n      isActive\n      isExternal\n      isAllowed\n      balance\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpdateBankDocument,
    "\n  mutation CreateBranch($attributes: BranchAttributes!) {\n    branch: createBranch(attributes: $attributes) {\n      id\n      name\n      code\n      description\n      contactPerson\n      contactNumber\n      contactEmail\n      depositQueue\n      depositQueueMultiplier\n      withdrawQueue\n      withdrawQueueMultiplier\n    }\n  }\n": types.CreateBranchDocument,
    "\n  mutation RemoveBranch($id: ID!) {\n    branch: removeBranch(id: $id) {\n      id\n      name\n      code\n      description\n      contactPerson\n      contactNumber\n      contactEmail\n      depositQueue\n      depositQueueMultiplier\n      withdrawQueue\n      withdrawQueueMultiplier\n      createdAt\n      updatedAt\n    }\n  }\n": types.RemoveBranchDocument,
    "\n  mutation UpdateBranch($id: ID!, $attributes: BranchAttributes!) {\n    branch: updateBranch(id: $id, attributes: $attributes) {\n      id\n      name\n      description\n      contactPerson\n      contactNumber\n      contactEmail\n      depositQueue\n      depositQueueMultiplier\n      withdrawQueue\n      withdrawQueueMultiplier\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpdateBranchDocument,
    "\n  mutation CreateClient($attributes: ClientAttributes!) {\n    client: createClient(attributes: $attributes) {\n      id\n      name\n      description\n      minDeposit\n      maxDeposit\n      minWithdraw\n      maxWithdraw\n      currency\n      depositRate\n      withdrawRate\n      depositCommission\n      withdrawCommission\n      isActive\n      enableDeposit\n      enableWithdraw\n      callbackUrl\n      redirectUrl\n      isSingleCallback\n      isAutoCallback\n      totalDeposit\n      totalWithdraw\n      totalDepositFee\n      totalWithdrawFee\n      totalTopup\n      totalSettlement\n      totalBalance\n      createdAt\n      updatedAt\n    }\n  }\n": types.CreateClientDocument,
    "\n  mutation RemoveClient($id: ID!) {\n    client: removeClient(id: $id) {\n      id\n      name\n      description\n      minDeposit\n      maxDeposit\n      minWithdraw\n      maxWithdraw\n      currency\n      depositRate\n      withdrawRate\n      depositCommission\n      withdrawCommission\n      isActive\n      enableDeposit\n      enableWithdraw\n      callbackUrl\n      redirectUrl\n      isSingleCallback\n      isAutoCallback\n      totalDeposit\n      totalWithdraw\n      totalDepositFee\n      totalWithdrawFee\n      totalTopup\n      totalSettlement\n      totalBalance\n      createdAt\n      updatedAt\n    }\n  }\n": types.RemoveClientDocument,
    "\n  mutation UpdateClient($id: ID!, $attributes: ClientAttributes!) {\n    client: updateClient(id: $id, attributes: $attributes) {\n      id\n      name\n      description\n      minDeposit\n      maxDeposit\n      minWithdraw\n      maxWithdraw\n      currency\n      depositRate\n      withdrawRate\n      depositCommission\n      withdrawCommission\n      isActive\n      enableDeposit\n      enableWithdraw\n      callbackUrl\n      redirectUrl\n      isSingleCallback\n      isAutoCallback\n      totalDeposit\n      totalWithdraw\n      totalDepositFee\n      totalWithdrawFee\n      totalTopup\n      totalSettlement\n      totalBalance\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpdateClientDocument,
    "\n  mutation CreateOption($attributes: OptionAttributes!) {\n    option: createOption(attributes: $attributes) {\n      id\n      optionableId\n      optionableType\n      fieldName\n      value\n      createdAt\n      updatedAt\n    }\n  }\n": types.CreateOptionDocument,
    "\n  mutation UpdateOption($id: ID!, $attributes: OptionAttributes!) {\n    option: updateOption(id: $id, attributes: $attributes) {\n      id\n      optionableId\n      optionableType\n      fieldName\n      value\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpdateOptionDocument,
    "\n  mutation CreateSettlement($attributes: SettlementAttributes!) {\n    settlement: createSettlement(attributes: $attributes) {\n      id\n      client {\n        id\n        code\n        name\n      }\n      startsAt\n      endsAt\n      totalDeposit\n      totalWithdraw\n      depositRate\n      withdrawRate\n      depositFee\n      withdrawFee\n      totalSettlement\n      status\n      sent\n      balance\n      createdAt\n      updatedAt\n    }\n  }\n": types.CreateSettlementDocument,
    "\n  mutation RemoveSettlement($id: ID!) {\n    settlement: removeSettlement(id: $id) {\n      id\n      client {\n        id\n        code\n        name\n      }\n      startsAt\n      endsAt\n      totalDeposit\n      totalWithdraw\n      depositRate\n      withdrawRate\n      depositFee\n      withdrawFee\n      totalSettlement\n      sent\n      balance\n      createdAt\n      updatedAt\n    }\n  }\n": types.RemoveSettlementDocument,
    "\n  mutation UpdateSettlement($id: ID!, $attributes: SettlementAttributes!) {\n    settlement: updateSettlement(id: $id, attributes: $attributes) {\n      id\n      client {\n        id\n        code\n        name\n      }\n      startsAt\n      endsAt\n      totalDeposit\n      totalWithdraw\n      depositRate\n      withdrawRate\n      depositFee\n      withdrawFee\n      totalSettlement\n      status\n      sent\n      balance\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpdateSettlementDocument,
    "\n  mutation CreateSimCard($attributes: SimCardAttributes!) {\n    simCard: createSimCard(attributes: $attributes) {\n      id\n\n      branch {\n        id\n        name\n      }\n\n      name\n      mobileNumber\n      network\n      slot\n      isActive\n      lastLoadDate\n\n      createdAt\n      updatedAt\n    }\n  }\n": types.CreateSimCardDocument,
    "\n  mutation RemoveSimCard($id: ID!) {\n    simCard: removeSimCard(id: $id) {\n      id\n    }\n  }\n": types.RemoveSimCardDocument,
    "\n  mutation UpdateSimCard($id: ID!, $attributes: SimCardAttributes!) {\n    simCard: updateSimCard(id: $id, attributes: $attributes) {\n      id\n\n      branch {\n        id\n        name\n      }\n\n      name\n      mobileNumber\n      network\n      slot\n      isActive\n      lastLoadDate\n\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpdateSimCardDocument,
    "\n  mutation CreateSmsMessage($attributes: SmsMessageAttributes!) {\n    message: createSmsMessage(attributes: $attributes) {\n      id\n\n      smsNode {\n        id\n        code\n      }\n\n      client {\n        id\n        code\n      }\n\n      message\n      mobileNumber\n      sentAt\n      scheduledAt\n      retries\n      status\n    }\n  }\n": types.CreateSmsMessageDocument,
    "\n  mutation CreateSmsNode($attributes: SmsNodeAttributes!) {\n    node: createSmsNode(attributes: $attributes) {\n      id\n      name\n      code\n      device\n      description\n      isActive\n      queued\n      updatedAt\n      createdAt\n    }\n  }\n": types.CreateSmsNodeDocument,
    "\n  mutation RemoveSmsNode($id: ID!) {\n    node: removeSmsNode(id: $id) {\n      id\n    }\n  }\n": types.RemoveSmsNodeDocument,
    "\n  mutation UpdateSmsNode($id: ID!, $attributes: SmsNodeAttributes!) {\n    node: updateSmsNode(id: $id, attributes: $attributes) {\n      id\n      name\n      code\n      device\n      description\n      isActive\n      queued\n      updatedAt\n      createdAt\n    }\n  }\n": types.UpdateSmsNodeDocument,
    "\n  mutation CreateToken($attributes: TokenAttributes!) {\n    token: createToken(attributes: $attributes) {\n      id\n      clientToken\n      clientSecret\n      expiresAt\n      createdAt\n      updatedAt\n    }\n  }\n": types.CreateTokenDocument,
    "\n  mutation RemoveToken($id: ID!) {\n    token: removeToken(id: $id) {\n      id\n      clientToken\n      clientSecret\n      expiresAt\n      createdAt\n      updatedAt\n    }\n  }\n": types.RemoveTokenDocument,
    "\n  mutation UpdateToken($id: ID!, $attributes: TokenAttributes!) {\n    token: updateToken(id: $id, attributes: $attributes) {\n      id\n      clientToken\n      clientSecret\n      expiresAt\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpdateTokenDocument,
    "\n  mutation ResendCallback($id: ID!) {\n    resendCallback(id: $id)\n  }\n": types.ResendCallbackDocument,
    "\n  mutation CreateTransaction($attributes: TransactionAttributes!) {\n    transaction: createTransaction(attributes: $attributes) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      client {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        accountNumber\n        accountName\n        code\n        bankType {\n          id\n          name\n          code\n        }\n      }\n\n      account {\n        id\n        name\n      }\n\n      walletQueue {\n        id\n      }\n\n      webpayToken {\n        id\n      }\n\n      claimReferenceNumber\n      transactionType\n      amount\n      fee\n      status\n      statusNotes\n      accountName\n      accountNumber\n      referenceCode\n      referenceNumber\n      isCallbackSent\n      callbackStatusSent\n      callbackStatusCode\n      callbackNotes\n      clientTransactionId\n      callbackUrl\n      redirectUrl\n      isWebpay\n      processedBy\n      createdAt\n      updatedAt\n    }\n  }\n": types.CreateTransactionDocument,
    "\n  mutation TransferTransactions($walletQueueId: ID!, $transactionIds: [ID!]!) {\n    transactions: transferTransactions(walletQueueId: $walletQueueId, transactionIds: $transactionIds) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      client {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        accountNumber\n        accountName\n        code\n        bankType {\n          id\n          name\n          code\n        }\n      }\n\n      account {\n        id\n        name\n      }\n\n      walletQueue {\n        id\n      }\n\n      webpayToken {\n        id\n\n        client {\n          id\n          name\n        }\n\n        transactionRequest {\n          id\n        }\n\n        clientTransactionId\n        accountName\n        accountNumber\n        amount\n        fee\n        createdAt\n        updatedAt\n      }\n\n      claimReferenceNumber\n      transactionType\n      amount\n      fee\n      status\n      statusNotes\n      accountName\n      accountNumber\n      referenceCode\n      referenceNumber\n      isCallbackSent\n      callbackStatusSent\n      callbackStatusCode\n      callbackNotes\n      clientTransactionId\n      callbackUrl\n      redirectUrl\n      isWebpay\n      processedBy\n      createdAt\n      updatedAt\n    }\n  }\n": types.TransferTransactionsDocument,
    "\n  mutation UpdateTransaction($id: ID!, $attributes: TransactionAttributes!) {\n    transaction: updateTransaction(id: $id, attributes: $attributes) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      client {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        accountNumber\n        accountName\n        code\n        bankType {\n          id\n          name\n          code\n        }\n      }\n\n      account {\n        id\n        name\n      }\n\n      walletQueue {\n        id\n      }\n\n      webpayToken {\n        id\n      }\n\n      claimReferenceNumber\n      transactionType\n      amount\n      fee\n      status\n      statusNotes\n      accountName\n      accountNumber\n      referenceCode\n      referenceNumber\n      isCallbackSent\n      callbackStatusSent\n      callbackStatusCode\n      callbackNotes\n      clientTransactionId\n      callbackUrl\n      redirectUrl\n      isWebpay\n      processedBy\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpdateTransactionDocument,
    "\n  mutation CreateUserType($attributes: UserTypeAttributes!) {\n    userType: createUserType(attributes: $attributes) {\n      id\n      code\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n": types.CreateUserTypeDocument,
    "\n  mutation RemoveUserType($id: ID!) {\n    userType: removeUserType(id: $id) {\n      id\n      code\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n": types.RemoveUserTypeDocument,
    "\n  mutation UpdateUserType($id: ID!, $attributes: UserTypeAttributes!) {\n    userType: updateUserType(id: $id, attributes: $attributes) {\n      id\n      code\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpdateUserTypeDocument,
    "\n  mutation CreateUser($attributes: UserAttributes!) {\n    user: createUser(attributes: $attributes) {\n      id\n\n      userType {\n        id\n        code\n        name\n      }\n\n      branch {\n        id\n        code\n        name\n      }\n\n      username\n      firstName\n      lastName\n      createdAt\n      updatedAt\n    }\n  }\n": types.CreateUserDocument,
    "\n  mutation RemoveUser($id: ID!) {\n    user: removeUser(id: $id) {\n      id\n\n      userType {\n        id\n        code\n        name\n      }\n\n      branch {\n        id\n        code\n        name\n      }\n\n      username\n      firstName\n      lastName\n      createdAt\n      updatedAt\n    }\n  }\n": types.RemoveUserDocument,
    "\n  mutation UpdateUser($id: ID!, $attributes: UserAttributes!) {\n    user: updateUser(id: $id, attributes: $attributes) {\n      id\n\n      userType {\n        id\n        code\n        name\n      }\n\n      branch {\n        id\n        code\n        name\n      }\n\n      username\n      firstName\n      lastName\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpdateUserDocument,
    "\n  mutation CreateWalletQueueItem($attributes: WalletQueueItemAttributes!) {\n    walletQueueItem: createWalletQueueItem(attributes: $attributes) {\n      id\n\n      walletQueue {\n        id\n        code\n        queueType\n        bank {\n          id\n          code\n          bankType {\n            id\n            code\n          }\n        }\n      }\n\n      matchedTransaction {\n        id\n      }\n\n      linkedWalletQueueItem {\n        id\n      }\n\n      transactionType\n      amount\n      accountNumber\n      accountName\n      referenceNumber\n      balance\n      code\n      transactionDate\n      status\n      notes\n      remarks\n      processedBy\n      createdAt\n      updatedAt\n\n      attachment {\n        id\n        url\n      }\n    }\n  }\n": types.CreateWalletQueueItemDocument,
    "\n  mutation RemoveWalletQueueItem($id: ID!) {\n    walletQueueItem: removeWalletQueueItem(id: $id) {\n      id\n    }\n  }\n": types.RemoveWalletQueueItemDocument,
    "\n  mutation UpdateWalletQueueItem($id: ID!, $attributes: WalletQueueItemAttributes!) {\n    walletQueueItem: updateWalletQueueItem(id: $id, attributes: $attributes) {\n      id\n\n      walletQueue {\n        id\n        code\n        queueType\n        bank {\n          id\n          code\n          bankType {\n            id\n            code\n          }\n        }\n      }\n\n      matchedTransaction {\n        id\n      }\n\n      linkedWalletQueueItem {\n        id\n      }\n\n      transactionType\n      amount\n      accountNumber\n      accountName\n      referenceNumber\n      balance\n      code\n      transactionDate\n      status\n      notes\n      remarks\n      processedBy\n      createdAt\n      updatedAt\n\n      attachment {\n        id\n        url\n      }\n    }\n  }\n": types.UpdateWalletQueueItemDocument,
    "\n  mutation CreateWalletQueue($attributes: WalletQueueAttributes!) {\n    walletQueue: createWalletQueue(attributes: $attributes) {\n      id\n      code\n\n      branch {\n        id\n        code\n      }\n\n      bank {\n        id\n        code\n        phone\n        accountNumber\n        accountName\n        walletLimit\n        remainingLimit\n        phone\n        purpose\n\n        bankType {\n          code\n        }\n      }\n\n      clients {\n        id\n        code\n        name\n      }\n\n      queueType\n      startingBalance\n      endingBalance\n      totalAmount\n      totalSuccess\n      totalTransferIn\n      totalTransferOut\n      totalQueueAmount\n      queuedBy\n      processedBy\n      confirmedBy\n      notes\n      queue\n      isActive\n      interval\n      intervalCounter\n      intervalCounterLimit\n      intervalCountdown\n      status\n      isLocked\n      createdAt\n      updatedAt\n    }\n  }\n": types.CreateWalletQueueDocument,
    "\n  mutation RecomputeWalletQueue($id: ID!) {\n    walletQueue: recomputeWalletQueue(id: $id) {\n      id\n      code\n\n      branch {\n        id\n        code\n      }\n\n      bank {\n        id\n        code\n        phone\n        accountNumber\n        accountName\n        walletLimit\n        remainingLimit\n        phone\n        purpose\n\n        bankType {\n          code\n        }\n      }\n\n      clients {\n        id\n        code\n        name\n      }\n\n      queueType\n      startingBalance\n      endingBalance\n      totalAmount\n      totalSuccess\n      totalTransferIn\n      totalTransferOut\n      totalQueueAmount\n      queuedBy\n      processedBy\n      confirmedBy\n      notes\n      queue\n      isActive\n      interval\n      intervalCounter\n      intervalCounterLimit\n      intervalCountdown\n      status\n      isLocked\n      createdAt\n      updatedAt\n    }\n  }\n": types.RecomputeWalletQueueDocument,
    "\n  mutation removeWalletQueue($id: ID!) {\n    walletQueue: removeWalletQueue(id: $id) {\n      id\n    }\n  }\n": types.RemoveWalletQueueDocument,
    "\n  mutation UpdateWalletQueue($id: ID!, $attributes: WalletQueueAttributes!) {\n    walletQueue: updateWalletQueue(id: $id, attributes: $attributes) {\n      id\n      code\n\n      branch {\n        id\n        code\n      }\n\n      bank {\n        id\n        code\n        phone\n        accountNumber\n        accountName\n        walletLimit\n        remainingLimit\n        phone\n        purpose\n\n        bankType {\n          code\n        }\n      }\n\n      clients {\n        id\n        code\n        name\n      }\n\n      queueType\n      startingBalance\n      endingBalance\n      totalAmount\n      totalSuccess\n      totalTransferIn\n      totalTransferOut\n      totalQueueAmount\n      queuedBy\n      processedBy\n      confirmedBy\n      notes\n      queue\n      isActive\n      interval\n      intervalCounter\n      intervalCounterLimit\n      intervalCountdown\n      status\n      isLocked\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpdateWalletQueueDocument,
    "\n  mutation CreateWhitelistedIp($attributes: WhitelistedIpAttributes!) {\n    whitelistedIp: createWhitelistedIp(attributes: $attributes) {\n      id\n\n      client {\n        id\n        name\n      }\n\n      ipAddress\n      isAllowed\n      description\n      createdAt\n      updatedAt\n    }\n  }\n": types.CreateWhitelistedIpDocument,
    "\n  mutation RemoveWhitelistedIp($id: ID!) {\n    whitelistedIp: removeWhitelistedIp(id: $id) {\n      id\n\n      client {\n        id\n        name\n      }\n\n      ipAddress\n      isAllowed\n      description\n      createdAt\n      updatedAt\n    }\n  }\n": types.RemoveWhitelistedIpDocument,
    "\n  mutation UpdateWhitelistedIp($id: ID!, $attributes: WhitelistedIpAttributes!) {\n    whitelistedIp: updateWhitelistedIp(id: $id, attributes: $attributes) {\n      id\n\n      client {\n        id\n        name\n      }\n\n      ipAddress\n      isAllowed\n      description\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpdateWhitelistedIpDocument,
    "\n  query CurrentUser {\n    user: fetchCurrentUser {\n      id\n      username\n      email\n      firstName\n      lastName\n\n      userType {\n        id\n        code\n        name\n      }\n\n      branchId\n      clientId\n    }\n  }\n": types.CurrentUserDocument,
    "\n  query FetchBankTransfer($id: ID!) {\n    bankTransfer: fetchBankTransfer(id: $id) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        code\n        accountName\n        accountNumber\n\n        bankType {\n          code\n        }\n      }\n\n      confirmedBy\n      isConfirmed\n\n      walletQueue {\n        id\n        code\n      }\n\n      transactionBank {\n        id\n        code\n        accountName\n        accountNumber\n\n        bankType {\n          code\n        }\n      }\n\n      amount\n      fee\n\n      transactionDate\n\n      sentRef\n      recvRef\n\n      transactionType\n      purpose\n      notes\n\n      attachments {\n        id\n        attachableType\n        attachableId\n        filename\n        url\n      }\n\n      walletQueue {\n        id\n        code\n      }\n\n      createdAt\n      updatedAt\n\n      inverseTransfer {\n        id\n\n        branch {\n          id\n          code\n          name\n        }\n\n        bank {\n          id\n          code\n          accountName\n          accountNumber\n\n          bankType {\n            code\n          }\n        }\n\n        confirmedBy\n        isConfirmed\n\n        walletQueue {\n          id\n          code\n        }\n\n        transactionBank {\n          id\n          code\n          accountName\n          accountNumber\n\n          bankType {\n            code\n          }\n        }\n\n        amount\n        fee\n\n        transactionDate\n\n        sentRef\n        recvRef\n\n        transactionType\n        purpose\n        notes\n\n        attachments {\n          id\n          attachableType\n          attachableId\n          filename\n          url\n        }\n\n        walletQueue {\n          id\n          code\n        }\n\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.FetchBankTransferDocument,
    "\n  query FetchBankTransfers($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    bankTransfers: fetchBankTransfers(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        branch {\n          id\n          code\n          name\n        }\n\n        bank {\n          id\n          code\n          accountName\n          accountNumber\n\n          bankType {\n            code\n          }\n        }\n\n        confirmedBy\n        isConfirmed\n\n        walletQueue {\n          id\n          code\n        }\n\n        transactionBank {\n          id\n          code\n          accountName\n          accountNumber\n\n          bankType {\n            code\n          }\n        }\n\n        amount\n        fee\n\n        transactionDate\n\n        sentRef\n        recvRef\n\n        transactionType\n        purpose\n        notes\n\n        attachments {\n          id\n          attachableType\n          attachableId\n          filename\n          url\n        }\n\n        walletQueue {\n          id\n          code\n        }\n\n        createdAt\n        updatedAt\n\n        inverseTransfer {\n          id\n\n          branch {\n            id\n            code\n            name\n          }\n\n          bank {\n            id\n            code\n            accountName\n            accountNumber\n\n            bankType {\n              code\n            }\n          }\n\n          confirmedBy\n          isConfirmed\n\n          walletQueue {\n            id\n            code\n          }\n\n          transactionBank {\n            id\n            code\n            accountName\n            accountNumber\n\n            bankType {\n              code\n            }\n          }\n\n          amount\n          fee\n\n          transactionDate\n\n          sentRef\n          recvRef\n\n          transactionType\n          purpose\n          notes\n\n          attachments {\n            id\n            attachableType\n            attachableId\n            filename\n            url\n          }\n\n          walletQueue {\n            id\n            code\n          }\n\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n": types.FetchBankTransfersDocument,
    "\n  query FetchBankType($id: ID!) {\n    bankType: fetchBankType(id: $id) {\n      id\n      code\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n": types.FetchBankTypeDocument,
    "\n  query FetchBankTypes($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    bankTypes: fetchBankTypes(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        code\n        name\n        description\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.FetchBankTypesDocument,
    "\n  query FetchBank($id: ID!) {\n    bank: fetchBank(id: $id) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      bankType {\n        id\n        code\n        name\n      }\n\n      activeWalletQueue {\n        id\n        code\n      }\n\n      code\n      phone\n      slot\n      merchantName\n      accountName\n      accountNumber\n      password\n      purpose\n      description\n      walletLimit\n      remainingLimit\n      isProcessor\n      isActive\n      isExternal\n      isAllowed\n      balance\n      createdAt\n      updatedAt\n    }\n  }\n": types.FetchBankDocument,
    "\n  query FetchBanks($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    banks: fetchBanks(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        branch {\n          id\n          code\n          name\n        }\n\n        bankType {\n          id\n          code\n          name\n        }\n\n        activeWalletQueue {\n          id\n          code\n        }\n\n        code\n        phone\n        slot\n        merchantName\n        accountName\n        accountNumber\n        password\n        purpose\n        description\n        walletLimit\n        remainingLimit\n        isProcessor\n        isActive\n        isExternal\n        isAllowed\n        balance\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.FetchBanksDocument,
    "\n  query FetchBranch($id: ID!) {\n    branch: fetchBranch(id: $id) {\n      id\n      code\n      name\n      description\n      contactPerson\n      contactNumber\n      contactEmail\n      depositQueue\n      depositQueueMultiplier\n      withdrawQueue\n      withdrawQueueMultiplier\n      balance\n      createdAt\n      updatedAt\n\n      options {\n        id\n        fieldName\n        value\n      }\n    }\n  }\n": types.FetchBranchDocument,
    "\n  query FetchBranches($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    branches: fetchBranches(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        code\n        name\n        description\n        contactPerson\n        contactNumber\n        contactEmail\n        depositQueue\n        depositQueueMultiplier\n        withdrawQueue\n        withdrawQueueMultiplier\n        balance\n        createdAt\n        updatedAt\n\n        options {\n          id\n          fieldName\n          value\n        }\n      }\n    }\n  }\n": types.FetchBranchesDocument,
    "\n  query FetchClientToken($id: ID!) {\n    clientToken: fetchClientToken(id: $id) {\n      id\n\n      client {\n        id\n        name\n      }\n\n      token {\n        id\n        clientToken\n        clientSecret\n        expiresAt\n      }\n\n      createdAt\n      updatedAt\n    }\n  }\n": types.FetchClientTokenDocument,
    "\n  query FetchClientTokens($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    clientTokens: fetchClientTokens(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        client {\n          id\n          name\n        }\n\n        token {\n          id\n          clientToken\n          clientSecret\n          expiresAt\n        }\n\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.FetchClientTokensDocument,
    "\n  query FetchClient($id: ID!) {\n    client: fetchClient(id: $id) {\n      id\n      code\n      name\n      description\n      minDeposit\n      maxDeposit\n      minWithdraw\n      maxWithdraw\n      currency\n      depositRate\n      withdrawRate\n      depositCommission\n      withdrawCommission\n      isActive\n      enableDeposit\n      enableWithdraw\n      callbackUrl\n      redirectUrl\n      isSingleCallback\n      isAutoCallback\n      totalDeposit\n      totalWithdraw\n      totalDepositFee\n      totalWithdrawFee\n      totalTopup\n      totalSettlement\n      totalBalance\n      createdAt\n      updatedAt\n    }\n  }\n": types.FetchClientDocument,
    "\n  query FetchClients($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    clients: fetchClients(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        code\n        name\n        description\n        minDeposit\n        maxDeposit\n        minWithdraw\n        maxWithdraw\n        currency\n        depositRate\n        withdrawRate\n        depositCommission\n        withdrawCommission\n        isActive\n        enableDeposit\n        enableWithdraw\n        callbackUrl\n        redirectUrl\n        isSingleCallback\n        isAutoCallback\n        totalDeposit\n        totalWithdraw\n        totalDepositFee\n        totalWithdrawFee\n        totalTopup\n        totalSettlement\n        totalBalance\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.FetchClientsDocument,
    "\n  query FetchClientDashboard {\n    dashboard: fetchClientDashboard\n  }\n": types.FetchClientDashboardDocument,
    "\n  query FetchOption($id: ID!) {\n    option: fetchOption(id: $id) {\n      id\n      optionableId\n      optionableType\n      fieldName\n      value\n      createdAt\n      updatedAt\n    }\n  }\n": types.FetchOptionDocument,
    "\n  query FetchOptions($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    options: fetchOptions(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        optionableType\n        optionableId\n        fieldName\n        value\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.FetchOptionsDocument,
    "\n  query FetchSettlement($id: ID!) {\n    settlement: fetchSettlement(id: $id) {\n      id\n      client {\n        id\n        code\n        name\n      }\n      startsAt\n      endsAt\n      totalDeposit\n      totalWithdraw\n      depositRate\n      withdrawRate\n      depositFee\n      withdrawFee\n      totalSettlement\n      status\n      sent\n      balance\n      createdAt\n      updatedAt\n    }\n  }\n": types.FetchSettlementDocument,
    "\n  query FetchSettlements($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    settlements: fetchSettlements(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        client {\n          id\n          code\n          name\n        }\n\n        startsAt\n        endsAt\n        totalDeposit\n        totalWithdraw\n        depositRate\n        withdrawRate\n        depositFee\n        withdrawFee\n        totalSettlement\n        status\n        sent\n        balance\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.FetchSettlementsDocument,
    "\n  query FetchSimCard($id: ID!) {\n    simCard: fetchSimCard(id: $id) {\n      id\n\n      branch {\n        id\n        name\n      }\n\n      name\n      mobileNumber\n      network\n      slot\n      isActive\n      lastLoadDate\n\n      createdAt\n      updatedAt\n    }\n  }\n": types.FetchSimCardDocument,
    "\n  query FetchSimCards($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    simCards: fetchSimCards(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        branch {\n          id\n          name\n        }\n\n        name\n        mobileNumber\n        network\n        slot\n        isActive\n        lastLoadDate\n\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.FetchSimCardsDocument,
    "\n  query FetchSmsMessage($id: ID!) {\n    message: fetchSmsMessage(id: $id) {\n      id\n      smsNode {\n        id\n        code\n      }\n      client {\n        id\n        name\n        code\n      }\n      message\n      mobileNumber\n      sentAt\n      scheduledAt\n      status\n      isInstant\n      retries\n      createdAt\n    }\n  }\n": types.FetchSmsMessageDocument,
    "\n  query FetchSmsMessages($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    smsMessages: fetchSmsMessages(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        smsNode {\n          id\n          code\n        }\n        client {\n          id\n          name\n          code\n        }\n        message\n        mobileNumber\n        sentAt\n        scheduledAt\n        status\n        isInstant\n        retries\n        createdAt\n      }\n    }\n  }\n": types.FetchSmsMessagesDocument,
    "\n  query FetchSmsNode($id: ID!) {\n    smsNode: fetchSmsNode(id: $id) {\n      id\n      name\n      code\n      device\n      description\n      isActive\n      queued\n      updatedAt\n      createdAt\n    }\n  }\n": types.FetchSmsNodeDocument,
    "\n  query FetchSmsNodes($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    smsNodes: fetchSmsNodes(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        name\n        code\n        device\n        description\n        isActive\n        queued\n        updatedAt\n        createdAt\n      }\n    }\n  }\n": types.FetchSmsNodesDocument,
    "\n  query FetchToken($id: ID!) {\n    token: fetchToken(id: $id) {\n      id\n      clientToken\n      clientSecret\n      expiresAt\n      createdAt\n      updatedAt\n    }\n  }\n": types.FetchTokenDocument,
    "\n  query FetchTokens($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    tokens: fetchTokens(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        clientToken\n        clientSecret\n        expiresAt\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.FetchTokensDocument,
    "\n  query FetchTransactionCallback($id: ID!) {\n    transactionCallback: fetchTransactionCallback(id: $id) {\n      id\n      url\n      requestBody\n      responseCode\n      responseBody\n      sender\n      createdAt\n      updatedAt\n    }\n  }\n": types.FetchTransactionCallbackDocument,
    "\n  query FetchTransactionCallbacks(\n    $filters: [FilterInput!]\n    $order: [OrderInput!]\n    $page: Int\n    $limit: Int\n  ) {\n    transactionCallbacks: fetchTransactionCallbacks(\n      filters: $filters\n      order: $order\n      page: $page\n      limit: $limit\n    ) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        url\n        requestBody\n        responseCode\n        responseBody\n        sender\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.FetchTransactionCallbacksDocument,
    "\n  query FetchTransaction($id: ID!) {\n    transaction: fetchTransaction(id: $id) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      client {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        accountNumber\n        accountName\n        code\n        bankType {\n          id\n          name\n          code\n        }\n      }\n\n      account {\n        id\n        name\n      }\n\n      walletQueue {\n        id\n        code\n      }\n\n      webpayToken {\n        id\n\n        client {\n          id\n          name\n        }\n\n        transactionRequest {\n          id\n        }\n\n        clientTransactionId\n        accountName\n        accountNumber\n        amount\n        fee\n        createdAt\n        updatedAt\n      }\n\n      claimReferenceNumber\n      transactionType\n      amount\n      fee\n      status\n      statusNotes\n      accountName\n      accountNumber\n      referenceCode\n      referenceNumber\n      isCallbackSent\n      callbackStatusSent\n      callbackStatusCode\n      callbackNotes\n      clientTransactionId\n      callbackUrl\n      redirectUrl\n      isWebpay\n      processedBy\n      createdAt\n      updatedAt\n    }\n  }\n": types.FetchTransactionDocument,
    "\n  query FetchTransactions($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    transactions: fetchTransactions(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        branch {\n          id\n          code\n          name\n        }\n\n        client {\n          id\n          code\n          name\n        }\n\n        bank {\n          id\n          accountNumber\n          accountName\n          code\n          bankType {\n            id\n            name\n            code\n          }\n        }\n\n        account {\n          id\n          name\n        }\n\n        walletQueue {\n          id\n          code\n        }\n\n        webpayToken {\n          id\n\n          client {\n            id\n            name\n          }\n\n          transactionRequest {\n            id\n          }\n\n          clientTransactionId\n          accountName\n          accountNumber\n          amount\n          fee\n          createdAt\n          updatedAt\n        }\n\n        claimReferenceNumber\n        transactionType\n        amount\n        fee\n        status\n        statusNotes\n        accountName\n        accountNumber\n        referenceCode\n        referenceNumber\n        isCallbackSent\n        callbackStatusSent\n        callbackStatusCode\n        callbackNotes\n        clientTransactionId\n        callbackUrl\n        redirectUrl\n        isWebpay\n        processedBy\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.FetchTransactionsDocument,
    "\n  query FetchUserType($id: ID!) {\n    userType: fetchUserType(id: $id) {\n      id\n      code\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n": types.FetchUserTypeDocument,
    "\n  query FetchUserTypes($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    userTypes: fetchUserTypes(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n      nodes {\n        id\n        code\n        name\n        description\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.FetchUserTypesDocument,
    "\n  query FetchUser($id: ID!) {\n    user: fetchUser(id: $id) {\n      id\n\n      userType {\n        id\n        code\n        name\n      }\n\n      branch {\n        id\n        code\n        name\n      }\n\n      username\n      firstName\n      lastName\n      createdAt\n      updatedAt\n    }\n  }\n": types.FetchUserDocument,
    "\n  query FetchUsers($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    users: fetchUsers(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        userType {\n          id\n          code\n          name\n        }\n\n        branch {\n          id\n          code\n          name\n        }\n\n        username\n        firstName\n        lastName\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.FetchUsersDocument,
    "\n  query FetchWalletQueueItem($id: ID!) {\n    walletQueueItem: fetchWalletQueueItem(id: $id) {\n      id\n\n      walletQueue {\n        id\n        code\n        queueType\n        bank {\n          id\n          code\n          bankType {\n            id\n            code\n          }\n        }\n      }\n\n      matchedTransaction {\n        id\n      }\n\n      linkedWalletQueueItem {\n        id\n      }\n\n      transactionType\n      amount\n      accountNumber\n      accountName\n      referenceNumber\n      balance\n      code\n      transactionDate\n      status\n      notes\n      remarks\n      processedBy\n      createdAt\n      updatedAt\n\n      attachment {\n        id\n        url\n      }\n    }\n  }\n": types.FetchWalletQueueItemDocument,
    "\n  query FetchWalletQueueItems($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    walletQueueItems: fetchWalletQueueItems(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        walletQueue {\n          id\n          code\n          queueType\n          bank {\n            id\n            code\n            bankType {\n              id\n              code\n            }\n          }\n        }\n\n        matchedTransaction {\n          id\n        }\n\n        linkedWalletQueueItem {\n          id\n        }\n\n        transactionType\n        amount\n        accountNumber\n        accountName\n        referenceNumber\n        balance\n        code\n        transactionDate\n        status\n        notes\n        remarks\n        processedBy\n        createdAt\n        updatedAt\n\n        attachment {\n          id\n          url\n        }\n      }\n    }\n  }\n": types.FetchWalletQueueItemsDocument,
    "\n  query FetchWalletQueue($id: ID!) {\n    walletQueue: fetchWalletQueue(id: $id) {\n      id\n      code\n\n      branch {\n        id\n        code\n      }\n\n      bank {\n        id\n        code\n        phone\n        accountNumber\n        accountName\n        walletLimit\n        remainingLimit\n        phone\n        purpose\n\n        bankType {\n          code\n        }\n      }\n\n      clients {\n        id\n        code\n        name\n      }\n\n      queueType\n      startingBalance\n      endingBalance\n      totalAmount\n      totalSuccess\n      totalTransferIn\n      totalTransferOut\n      totalQueueAmount\n      queuedBy\n      processedBy\n      confirmedBy\n      notes\n      queue\n      isActive\n      interval\n      intervalCounter\n      intervalCounterLimit\n      intervalCountdown\n      status\n      isLocked\n      createdAt\n      updatedAt\n    }\n  }\n": types.FetchWalletQueueDocument,
    "\n  query FetchWalletQueues($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    walletQueues: fetchWalletQueues(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        code\n\n        branch {\n          id\n          code\n        }\n\n        bank {\n          id\n          code\n          phone\n          accountNumber\n          accountName\n          walletLimit\n          remainingLimit\n          phone\n          purpose\n\n          bankType {\n            code\n          }\n        }\n\n        clients {\n          id\n          code\n          name\n        }\n\n        queueType\n        startingBalance\n        endingBalance\n        totalAmount\n        totalSuccess\n        totalTransferIn\n        totalTransferOut\n        totalQueueAmount\n        queuedBy\n        processedBy\n        confirmedBy\n        notes\n        queue\n        isActive\n        interval\n        intervalCounter\n        intervalCounterLimit\n        intervalCountdown\n        status\n        isLocked\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.FetchWalletQueuesDocument,
    "\n  query FetchWebpayToken($id: ID!) {\n    webpayToken: fetchWebpayToken(id: $id) {\n      id\n\n      client {\n        id\n        code\n        name\n      }\n\n      transactionRequest {\n        id\n      }\n\n      merchantName\n      accountName\n      accountNumber\n      amount\n      fee\n      clientTransactionId\n      clientNotes\n      callbackUrl\n      redirectUrl\n      expiresAt\n      createdAt\n      updatedAt\n    }\n  }\n": types.FetchWebpayTokenDocument,
    "\n  query FetchWebpayTokens($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    webpayTokens: fetchWebpayTokens(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        client {\n          id\n          code\n          name\n        }\n\n        transactionRequest {\n          id\n        }\n\n        merchantName\n        accountName\n        accountNumber\n        amount\n        fee\n        clientTransactionId\n        clientNotes\n        callbackUrl\n        redirectUrl\n        expiresAt\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.FetchWebpayTokensDocument,
    "\n  query FetchWhitelistedIp($id: ID!) {\n    whitelistedIp: fetchWhitelistedIp(id: $id) {\n      id\n\n      client {\n        id\n        name\n      }\n\n      ipAddress\n      isAllowed\n      description\n      createdAt\n      updatedAt\n    }\n  }\n": types.FetchWhitelistedIpDocument,
    "\n  query FetchWhitelistedIps(\n    $filters: [FilterInput!]\n    $order: [OrderInput!]\n    $page: Int\n    $limit: Int\n  ) {\n    whitelistedIps: fetchWhitelistedIps(\n      filters: $filters\n      order: $order\n      page: $page\n      limit: $limit\n    ) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        client {\n          id\n          name\n        }\n\n        ipAddress\n        isAllowed\n        description\n        createdAt\n        updatedAt\n      }\n    }\n  }\n": types.FetchWhitelistedIpsDocument,
    "\n  subscription CreateTransactionUpdates($branchId: ID, $clientId: ID, $walletQueueId: ID) {\n    transaction: createTransactionUpdates(\n      branchId: $branchId\n      clientId: $clientId\n      walletQueueId: $walletQueueId\n    ) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      client {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        accountNumber\n        accountName\n        code\n        bankType {\n          id\n          name\n          code\n        }\n      }\n\n      account {\n        id\n        name\n      }\n\n      walletQueue {\n        id\n      }\n\n      claimReferenceNumber\n      transactionType\n      amount\n      fee\n      status\n      statusNotes\n      accountName\n      accountNumber\n      referenceCode\n      referenceNumber\n      isCallbackSent\n      callbackStatusSent\n      callbackStatusCode\n      callbackNotes\n      clientTransactionId\n      callbackUrl\n      redirectUrl\n      isWebpay\n      processedBy\n      createdAt\n      updatedAt\n    }\n  }\n": types.CreateTransactionUpdatesDocument,
    "\n  subscription FetchTransactionsUpdates($branchId: ID, $clientId: ID, $walletQueueId: ID) {\n    transaction: fetchTransactionsUpdates(\n      branchId: $branchId\n      clientId: $clientId\n      walletQueueId: $walletQueueId\n    ) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      client {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        accountNumber\n        accountName\n        code\n        bankType {\n          id\n          name\n          code\n        }\n      }\n\n      account {\n        id\n        name\n      }\n\n      walletQueue {\n        id\n      }\n\n      claimReferenceNumber\n      transactionType\n      amount\n      fee\n      status\n      statusNotes\n      accountName\n      accountNumber\n      referenceCode\n      referenceNumber\n      isCallbackSent\n      callbackStatusSent\n      callbackStatusCode\n      callbackNotes\n      clientTransactionId\n      callbackUrl\n      redirectUrl\n      isWebpay\n      processedBy\n      createdAt\n      updatedAt\n    }\n  }\n": types.FetchTransactionsUpdatesDocument,
    "\n  subscription CreateWalletQueueItemUpdates($walletQueueId: ID) {\n    walletQueueItem: createWalletQueueItemUpdates(walletQueueId: $walletQueueId) {\n      id\n\n      walletQueue {\n        id\n        code\n        queueType\n        bank {\n          id\n          code\n          bankType {\n            id\n            code\n          }\n        }\n      }\n\n      matchedTransaction {\n        id\n      }\n\n      transactionType\n      amount\n      accountNumber\n      accountName\n      referenceNumber\n      balance\n      code\n      transactionDate\n      status\n      notes\n      remarks\n      processedBy\n      createdAt\n      updatedAt\n\n      attachment {\n        id\n        url\n      }\n    }\n  }\n": types.CreateWalletQueueItemUpdatesDocument,
    "\n  subscription FetchWalletQueueUpdates($id: ID!) {\n    walletQueue: fetchWalletQueueUpdates(id: $id) {\n      id\n      code\n\n      branch {\n        id\n        code\n      }\n\n      bank {\n        id\n        code\n        phone\n        accountNumber\n        accountName\n        walletLimit\n        remainingLimit\n        phone\n        purpose\n\n        bankType {\n          code\n        }\n      }\n\n      clients {\n        id\n        code\n        name\n      }\n\n      queueType\n      startingBalance\n      endingBalance\n      totalAmount\n      totalSuccess\n      totalTransferIn\n      totalTransferOut\n      totalQueueAmount\n      queuedBy\n      processedBy\n      confirmedBy\n      notes\n      queue\n      isActive\n      interval\n      intervalCounter\n      intervalCounterLimit\n      intervalCountdown\n      status\n      createdAt\n      updatedAt\n    }\n  }\n": types.FetchWalletQueueUpdatesDocument,
    "\n  subscription FetchWalletQueuesUpdates($branchId: ID) {\n    walletQueue: fetchWalletQueuesUpdates(branchId: $branchId) {\n      id\n      code\n\n      branch {\n        id\n        code\n      }\n\n      bank {\n        id\n        code\n        phone\n        accountNumber\n        accountName\n        walletLimit\n        remainingLimit\n        phone\n        purpose\n\n        bankType {\n          code\n        }\n      }\n\n      clients {\n        id\n        code\n        name\n      }\n\n      queueType\n      startingBalance\n      endingBalance\n      totalAmount\n      totalSuccess\n      totalTransferIn\n      totalTransferOut\n      totalQueueAmount\n      queuedBy\n      processedBy\n      confirmedBy\n      notes\n      queue\n      isActive\n      interval\n      intervalCounter\n      intervalCounterLimit\n      intervalCountdown\n      status\n      createdAt\n      updatedAt\n    }\n  }\n": types.FetchWalletQueuesUpdatesDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation FetchAttachmentOcr {\n    ocr: fetchAttachmentOcr\n  }\n"): (typeof documents)["\n  mutation FetchAttachmentOcr {\n    ocr: fetchAttachmentOcr\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveAttachment($id: ID!) {\n    attachment: removeAttachment(id: $id) {\n      id\n      attachableId\n      attachableType\n      filename\n      url\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveAttachment($id: ID!) {\n    attachment: removeAttachment(id: $id) {\n      id\n      attachableId\n      attachableType\n      filename\n      url\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation LoginUser($username: String!, $password: String!) {\n    auth: loginUser(username: $username, password: $password) {\n      token\n      expiresAt\n      user {\n        id\n        username\n\n        userType {\n          id\n          code\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation LoginUser($username: String!, $password: String!) {\n    auth: loginUser(username: $username, password: $password) {\n      token\n      expiresAt\n      user {\n        id\n        username\n\n        userType {\n          id\n          code\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation LogoutUser {\n    auth: logoutUser\n  }\n"): (typeof documents)["\n  mutation LogoutUser {\n    auth: logoutUser\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateBankTransfer($attributes: BankTransferAttributes!) {\n    bankTransfer: createBankTransfer(attributes: $attributes) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        code\n        accountName\n        accountNumber\n\n        bankType {\n          code\n        }\n      }\n\n      confirmedBy\n      isConfirmed\n\n      walletQueue {\n        id\n        code\n      }\n\n      transactionBank {\n        id\n        code\n        accountName\n        accountNumber\n\n        bankType {\n          code\n        }\n      }\n\n      amount\n      fee\n\n      transactionDate\n\n      sentRef\n      recvRef\n\n      transactionType\n      purpose\n      notes\n\n      attachments {\n        id\n        attachableType\n        attachableId\n        filename\n        url\n      }\n\n      walletQueue {\n        id\n        code\n      }\n\n      createdAt\n      updatedAt\n\n      inverseTransfer {\n        id\n\n        branch {\n          id\n          code\n          name\n        }\n\n        bank {\n          id\n          code\n          accountName\n          accountNumber\n\n          bankType {\n            code\n          }\n        }\n\n        confirmedBy\n        isConfirmed\n\n        walletQueue {\n          id\n          code\n        }\n\n        transactionBank {\n          id\n          code\n          accountName\n          accountNumber\n\n          bankType {\n            code\n          }\n        }\n\n        amount\n        fee\n\n        transactionDate\n\n        sentRef\n        recvRef\n\n        transactionType\n        purpose\n        notes\n\n        attachments {\n          id\n          attachableType\n          attachableId\n          filename\n          url\n        }\n\n        walletQueue {\n          id\n          code\n        }\n\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateBankTransfer($attributes: BankTransferAttributes!) {\n    bankTransfer: createBankTransfer(attributes: $attributes) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        code\n        accountName\n        accountNumber\n\n        bankType {\n          code\n        }\n      }\n\n      confirmedBy\n      isConfirmed\n\n      walletQueue {\n        id\n        code\n      }\n\n      transactionBank {\n        id\n        code\n        accountName\n        accountNumber\n\n        bankType {\n          code\n        }\n      }\n\n      amount\n      fee\n\n      transactionDate\n\n      sentRef\n      recvRef\n\n      transactionType\n      purpose\n      notes\n\n      attachments {\n        id\n        attachableType\n        attachableId\n        filename\n        url\n      }\n\n      walletQueue {\n        id\n        code\n      }\n\n      createdAt\n      updatedAt\n\n      inverseTransfer {\n        id\n\n        branch {\n          id\n          code\n          name\n        }\n\n        bank {\n          id\n          code\n          accountName\n          accountNumber\n\n          bankType {\n            code\n          }\n        }\n\n        confirmedBy\n        isConfirmed\n\n        walletQueue {\n          id\n          code\n        }\n\n        transactionBank {\n          id\n          code\n          accountName\n          accountNumber\n\n          bankType {\n            code\n          }\n        }\n\n        amount\n        fee\n\n        transactionDate\n\n        sentRef\n        recvRef\n\n        transactionType\n        purpose\n        notes\n\n        attachments {\n          id\n          attachableType\n          attachableId\n          filename\n          url\n        }\n\n        walletQueue {\n          id\n          code\n        }\n\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveBankTransfer($id: ID!) {\n    bankTransfer: removeBankTransfer(id: $id) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveBankTransfer($id: ID!) {\n    bankTransfer: removeBankTransfer(id: $id) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateBankTransfer($id: ID!, $attributes: BankTransferAttributes!) {\n    bankTransfer: updateBankTransfer(id: $id, attributes: $attributes) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        code\n        accountName\n        accountNumber\n\n        bankType {\n          code\n        }\n      }\n\n      confirmedBy\n      isConfirmed\n\n      walletQueue {\n        id\n        code\n      }\n\n      transactionBank {\n        id\n        code\n        accountName\n        accountNumber\n\n        bankType {\n          code\n        }\n      }\n\n      amount\n      fee\n\n      transactionDate\n\n      sentRef\n      recvRef\n\n      transactionType\n      purpose\n      notes\n\n      attachments {\n        id\n        attachableType\n        attachableId\n        filename\n        url\n      }\n\n      walletQueue {\n        id\n        code\n      }\n\n      createdAt\n      updatedAt\n\n      inverseTransfer {\n        id\n\n        branch {\n          id\n          code\n          name\n        }\n\n        bank {\n          id\n          code\n          accountName\n          accountNumber\n\n          bankType {\n            code\n          }\n        }\n\n        confirmedBy\n        isConfirmed\n\n        walletQueue {\n          id\n          code\n        }\n\n        transactionBank {\n          id\n          code\n          accountName\n          accountNumber\n\n          bankType {\n            code\n          }\n        }\n\n        amount\n        fee\n\n        transactionDate\n\n        sentRef\n        recvRef\n\n        transactionType\n        purpose\n        notes\n\n        attachments {\n          id\n          attachableType\n          attachableId\n          filename\n          url\n        }\n\n        walletQueue {\n          id\n          code\n        }\n\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateBankTransfer($id: ID!, $attributes: BankTransferAttributes!) {\n    bankTransfer: updateBankTransfer(id: $id, attributes: $attributes) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        code\n        accountName\n        accountNumber\n\n        bankType {\n          code\n        }\n      }\n\n      confirmedBy\n      isConfirmed\n\n      walletQueue {\n        id\n        code\n      }\n\n      transactionBank {\n        id\n        code\n        accountName\n        accountNumber\n\n        bankType {\n          code\n        }\n      }\n\n      amount\n      fee\n\n      transactionDate\n\n      sentRef\n      recvRef\n\n      transactionType\n      purpose\n      notes\n\n      attachments {\n        id\n        attachableType\n        attachableId\n        filename\n        url\n      }\n\n      walletQueue {\n        id\n        code\n      }\n\n      createdAt\n      updatedAt\n\n      inverseTransfer {\n        id\n\n        branch {\n          id\n          code\n          name\n        }\n\n        bank {\n          id\n          code\n          accountName\n          accountNumber\n\n          bankType {\n            code\n          }\n        }\n\n        confirmedBy\n        isConfirmed\n\n        walletQueue {\n          id\n          code\n        }\n\n        transactionBank {\n          id\n          code\n          accountName\n          accountNumber\n\n          bankType {\n            code\n          }\n        }\n\n        amount\n        fee\n\n        transactionDate\n\n        sentRef\n        recvRef\n\n        transactionType\n        purpose\n        notes\n\n        attachments {\n          id\n          attachableType\n          attachableId\n          filename\n          url\n        }\n\n        walletQueue {\n          id\n          code\n        }\n\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateBankType($attributes: BankTypeAttributes!) {\n    bankType: createBankType(attributes: $attributes) {\n      id\n      code\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateBankType($attributes: BankTypeAttributes!) {\n    bankType: createBankType(attributes: $attributes) {\n      id\n      code\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveBankType($id: ID!) {\n    bankType: removeBankType(id: $id) {\n      id\n      code\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveBankType($id: ID!) {\n    bankType: removeBankType(id: $id) {\n      id\n      code\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateBankType($id: ID!, $attributes: BankTypeAttributes!) {\n    bankType: updateBankType(id: $id, attributes: $attributes) {\n      id\n      code\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateBankType($id: ID!, $attributes: BankTypeAttributes!) {\n    bankType: updateBankType(id: $id, attributes: $attributes) {\n      id\n      code\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateBank($attributes: BankAttributes!) {\n    bank: createBank(attributes: $attributes) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      bankType {\n        id\n        code\n        name\n      }\n\n      activeWalletQueue {\n        id\n        code\n      }\n\n      code\n      phone\n      slot\n      merchantName\n      accountName\n      accountNumber\n      password\n      purpose\n      description\n      walletLimit\n      remainingLimit\n      isProcessor\n      isAllowed\n      isActive\n      isExternal\n      balance\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateBank($attributes: BankAttributes!) {\n    bank: createBank(attributes: $attributes) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      bankType {\n        id\n        code\n        name\n      }\n\n      activeWalletQueue {\n        id\n        code\n      }\n\n      code\n      phone\n      slot\n      merchantName\n      accountName\n      accountNumber\n      password\n      purpose\n      description\n      walletLimit\n      remainingLimit\n      isProcessor\n      isAllowed\n      isActive\n      isExternal\n      balance\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RecomputeAllBank {\n    recompute: recomputeAllBank\n  }\n"): (typeof documents)["\n  mutation RecomputeAllBank {\n    recompute: recomputeAllBank\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RecomputeBank($id: ID!) {\n    bank: recomputeBank(id: $id) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      bankType {\n        id\n        code\n        name\n      }\n\n      activeWalletQueue {\n        id\n        code\n      }\n\n      code\n      phone\n      slot\n      merchantName\n      accountName\n      accountNumber\n      password\n      purpose\n      description\n      walletLimit\n      remainingLimit\n      isProcessor\n      isActive\n      isExternal\n      isAllowed\n      balance\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation RecomputeBank($id: ID!) {\n    bank: recomputeBank(id: $id) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      bankType {\n        id\n        code\n        name\n      }\n\n      activeWalletQueue {\n        id\n        code\n      }\n\n      code\n      phone\n      slot\n      merchantName\n      accountName\n      accountNumber\n      password\n      purpose\n      description\n      walletLimit\n      remainingLimit\n      isProcessor\n      isActive\n      isExternal\n      isAllowed\n      balance\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveBank($id: ID!) {\n    bank: removeBank(id: $id) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveBank($id: ID!) {\n    bank: removeBank(id: $id) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateBank($id: ID!, $attributes: BankAttributes!) {\n    bank: updateBank(id: $id, attributes: $attributes) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      bankType {\n        id\n        code\n        name\n      }\n\n      activeWalletQueue {\n        id\n        code\n      }\n\n      code\n      phone\n      slot\n      merchantName\n      accountName\n      accountNumber\n      password\n      purpose\n      description\n      walletLimit\n      remainingLimit\n      isProcessor\n      isActive\n      isExternal\n      isAllowed\n      balance\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateBank($id: ID!, $attributes: BankAttributes!) {\n    bank: updateBank(id: $id, attributes: $attributes) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      bankType {\n        id\n        code\n        name\n      }\n\n      activeWalletQueue {\n        id\n        code\n      }\n\n      code\n      phone\n      slot\n      merchantName\n      accountName\n      accountNumber\n      password\n      purpose\n      description\n      walletLimit\n      remainingLimit\n      isProcessor\n      isActive\n      isExternal\n      isAllowed\n      balance\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateBranch($attributes: BranchAttributes!) {\n    branch: createBranch(attributes: $attributes) {\n      id\n      name\n      code\n      description\n      contactPerson\n      contactNumber\n      contactEmail\n      depositQueue\n      depositQueueMultiplier\n      withdrawQueue\n      withdrawQueueMultiplier\n    }\n  }\n"): (typeof documents)["\n  mutation CreateBranch($attributes: BranchAttributes!) {\n    branch: createBranch(attributes: $attributes) {\n      id\n      name\n      code\n      description\n      contactPerson\n      contactNumber\n      contactEmail\n      depositQueue\n      depositQueueMultiplier\n      withdrawQueue\n      withdrawQueueMultiplier\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveBranch($id: ID!) {\n    branch: removeBranch(id: $id) {\n      id\n      name\n      code\n      description\n      contactPerson\n      contactNumber\n      contactEmail\n      depositQueue\n      depositQueueMultiplier\n      withdrawQueue\n      withdrawQueueMultiplier\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveBranch($id: ID!) {\n    branch: removeBranch(id: $id) {\n      id\n      name\n      code\n      description\n      contactPerson\n      contactNumber\n      contactEmail\n      depositQueue\n      depositQueueMultiplier\n      withdrawQueue\n      withdrawQueueMultiplier\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateBranch($id: ID!, $attributes: BranchAttributes!) {\n    branch: updateBranch(id: $id, attributes: $attributes) {\n      id\n      name\n      description\n      contactPerson\n      contactNumber\n      contactEmail\n      depositQueue\n      depositQueueMultiplier\n      withdrawQueue\n      withdrawQueueMultiplier\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateBranch($id: ID!, $attributes: BranchAttributes!) {\n    branch: updateBranch(id: $id, attributes: $attributes) {\n      id\n      name\n      description\n      contactPerson\n      contactNumber\n      contactEmail\n      depositQueue\n      depositQueueMultiplier\n      withdrawQueue\n      withdrawQueueMultiplier\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateClient($attributes: ClientAttributes!) {\n    client: createClient(attributes: $attributes) {\n      id\n      name\n      description\n      minDeposit\n      maxDeposit\n      minWithdraw\n      maxWithdraw\n      currency\n      depositRate\n      withdrawRate\n      depositCommission\n      withdrawCommission\n      isActive\n      enableDeposit\n      enableWithdraw\n      callbackUrl\n      redirectUrl\n      isSingleCallback\n      isAutoCallback\n      totalDeposit\n      totalWithdraw\n      totalDepositFee\n      totalWithdrawFee\n      totalTopup\n      totalSettlement\n      totalBalance\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateClient($attributes: ClientAttributes!) {\n    client: createClient(attributes: $attributes) {\n      id\n      name\n      description\n      minDeposit\n      maxDeposit\n      minWithdraw\n      maxWithdraw\n      currency\n      depositRate\n      withdrawRate\n      depositCommission\n      withdrawCommission\n      isActive\n      enableDeposit\n      enableWithdraw\n      callbackUrl\n      redirectUrl\n      isSingleCallback\n      isAutoCallback\n      totalDeposit\n      totalWithdraw\n      totalDepositFee\n      totalWithdrawFee\n      totalTopup\n      totalSettlement\n      totalBalance\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveClient($id: ID!) {\n    client: removeClient(id: $id) {\n      id\n      name\n      description\n      minDeposit\n      maxDeposit\n      minWithdraw\n      maxWithdraw\n      currency\n      depositRate\n      withdrawRate\n      depositCommission\n      withdrawCommission\n      isActive\n      enableDeposit\n      enableWithdraw\n      callbackUrl\n      redirectUrl\n      isSingleCallback\n      isAutoCallback\n      totalDeposit\n      totalWithdraw\n      totalDepositFee\n      totalWithdrawFee\n      totalTopup\n      totalSettlement\n      totalBalance\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveClient($id: ID!) {\n    client: removeClient(id: $id) {\n      id\n      name\n      description\n      minDeposit\n      maxDeposit\n      minWithdraw\n      maxWithdraw\n      currency\n      depositRate\n      withdrawRate\n      depositCommission\n      withdrawCommission\n      isActive\n      enableDeposit\n      enableWithdraw\n      callbackUrl\n      redirectUrl\n      isSingleCallback\n      isAutoCallback\n      totalDeposit\n      totalWithdraw\n      totalDepositFee\n      totalWithdrawFee\n      totalTopup\n      totalSettlement\n      totalBalance\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateClient($id: ID!, $attributes: ClientAttributes!) {\n    client: updateClient(id: $id, attributes: $attributes) {\n      id\n      name\n      description\n      minDeposit\n      maxDeposit\n      minWithdraw\n      maxWithdraw\n      currency\n      depositRate\n      withdrawRate\n      depositCommission\n      withdrawCommission\n      isActive\n      enableDeposit\n      enableWithdraw\n      callbackUrl\n      redirectUrl\n      isSingleCallback\n      isAutoCallback\n      totalDeposit\n      totalWithdraw\n      totalDepositFee\n      totalWithdrawFee\n      totalTopup\n      totalSettlement\n      totalBalance\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateClient($id: ID!, $attributes: ClientAttributes!) {\n    client: updateClient(id: $id, attributes: $attributes) {\n      id\n      name\n      description\n      minDeposit\n      maxDeposit\n      minWithdraw\n      maxWithdraw\n      currency\n      depositRate\n      withdrawRate\n      depositCommission\n      withdrawCommission\n      isActive\n      enableDeposit\n      enableWithdraw\n      callbackUrl\n      redirectUrl\n      isSingleCallback\n      isAutoCallback\n      totalDeposit\n      totalWithdraw\n      totalDepositFee\n      totalWithdrawFee\n      totalTopup\n      totalSettlement\n      totalBalance\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateOption($attributes: OptionAttributes!) {\n    option: createOption(attributes: $attributes) {\n      id\n      optionableId\n      optionableType\n      fieldName\n      value\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateOption($attributes: OptionAttributes!) {\n    option: createOption(attributes: $attributes) {\n      id\n      optionableId\n      optionableType\n      fieldName\n      value\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateOption($id: ID!, $attributes: OptionAttributes!) {\n    option: updateOption(id: $id, attributes: $attributes) {\n      id\n      optionableId\n      optionableType\n      fieldName\n      value\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateOption($id: ID!, $attributes: OptionAttributes!) {\n    option: updateOption(id: $id, attributes: $attributes) {\n      id\n      optionableId\n      optionableType\n      fieldName\n      value\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateSettlement($attributes: SettlementAttributes!) {\n    settlement: createSettlement(attributes: $attributes) {\n      id\n      client {\n        id\n        code\n        name\n      }\n      startsAt\n      endsAt\n      totalDeposit\n      totalWithdraw\n      depositRate\n      withdrawRate\n      depositFee\n      withdrawFee\n      totalSettlement\n      status\n      sent\n      balance\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateSettlement($attributes: SettlementAttributes!) {\n    settlement: createSettlement(attributes: $attributes) {\n      id\n      client {\n        id\n        code\n        name\n      }\n      startsAt\n      endsAt\n      totalDeposit\n      totalWithdraw\n      depositRate\n      withdrawRate\n      depositFee\n      withdrawFee\n      totalSettlement\n      status\n      sent\n      balance\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveSettlement($id: ID!) {\n    settlement: removeSettlement(id: $id) {\n      id\n      client {\n        id\n        code\n        name\n      }\n      startsAt\n      endsAt\n      totalDeposit\n      totalWithdraw\n      depositRate\n      withdrawRate\n      depositFee\n      withdrawFee\n      totalSettlement\n      sent\n      balance\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveSettlement($id: ID!) {\n    settlement: removeSettlement(id: $id) {\n      id\n      client {\n        id\n        code\n        name\n      }\n      startsAt\n      endsAt\n      totalDeposit\n      totalWithdraw\n      depositRate\n      withdrawRate\n      depositFee\n      withdrawFee\n      totalSettlement\n      sent\n      balance\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateSettlement($id: ID!, $attributes: SettlementAttributes!) {\n    settlement: updateSettlement(id: $id, attributes: $attributes) {\n      id\n      client {\n        id\n        code\n        name\n      }\n      startsAt\n      endsAt\n      totalDeposit\n      totalWithdraw\n      depositRate\n      withdrawRate\n      depositFee\n      withdrawFee\n      totalSettlement\n      status\n      sent\n      balance\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateSettlement($id: ID!, $attributes: SettlementAttributes!) {\n    settlement: updateSettlement(id: $id, attributes: $attributes) {\n      id\n      client {\n        id\n        code\n        name\n      }\n      startsAt\n      endsAt\n      totalDeposit\n      totalWithdraw\n      depositRate\n      withdrawRate\n      depositFee\n      withdrawFee\n      totalSettlement\n      status\n      sent\n      balance\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateSimCard($attributes: SimCardAttributes!) {\n    simCard: createSimCard(attributes: $attributes) {\n      id\n\n      branch {\n        id\n        name\n      }\n\n      name\n      mobileNumber\n      network\n      slot\n      isActive\n      lastLoadDate\n\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateSimCard($attributes: SimCardAttributes!) {\n    simCard: createSimCard(attributes: $attributes) {\n      id\n\n      branch {\n        id\n        name\n      }\n\n      name\n      mobileNumber\n      network\n      slot\n      isActive\n      lastLoadDate\n\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveSimCard($id: ID!) {\n    simCard: removeSimCard(id: $id) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveSimCard($id: ID!) {\n    simCard: removeSimCard(id: $id) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateSimCard($id: ID!, $attributes: SimCardAttributes!) {\n    simCard: updateSimCard(id: $id, attributes: $attributes) {\n      id\n\n      branch {\n        id\n        name\n      }\n\n      name\n      mobileNumber\n      network\n      slot\n      isActive\n      lastLoadDate\n\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateSimCard($id: ID!, $attributes: SimCardAttributes!) {\n    simCard: updateSimCard(id: $id, attributes: $attributes) {\n      id\n\n      branch {\n        id\n        name\n      }\n\n      name\n      mobileNumber\n      network\n      slot\n      isActive\n      lastLoadDate\n\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateSmsMessage($attributes: SmsMessageAttributes!) {\n    message: createSmsMessage(attributes: $attributes) {\n      id\n\n      smsNode {\n        id\n        code\n      }\n\n      client {\n        id\n        code\n      }\n\n      message\n      mobileNumber\n      sentAt\n      scheduledAt\n      retries\n      status\n    }\n  }\n"): (typeof documents)["\n  mutation CreateSmsMessage($attributes: SmsMessageAttributes!) {\n    message: createSmsMessage(attributes: $attributes) {\n      id\n\n      smsNode {\n        id\n        code\n      }\n\n      client {\n        id\n        code\n      }\n\n      message\n      mobileNumber\n      sentAt\n      scheduledAt\n      retries\n      status\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateSmsNode($attributes: SmsNodeAttributes!) {\n    node: createSmsNode(attributes: $attributes) {\n      id\n      name\n      code\n      device\n      description\n      isActive\n      queued\n      updatedAt\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateSmsNode($attributes: SmsNodeAttributes!) {\n    node: createSmsNode(attributes: $attributes) {\n      id\n      name\n      code\n      device\n      description\n      isActive\n      queued\n      updatedAt\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveSmsNode($id: ID!) {\n    node: removeSmsNode(id: $id) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveSmsNode($id: ID!) {\n    node: removeSmsNode(id: $id) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateSmsNode($id: ID!, $attributes: SmsNodeAttributes!) {\n    node: updateSmsNode(id: $id, attributes: $attributes) {\n      id\n      name\n      code\n      device\n      description\n      isActive\n      queued\n      updatedAt\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateSmsNode($id: ID!, $attributes: SmsNodeAttributes!) {\n    node: updateSmsNode(id: $id, attributes: $attributes) {\n      id\n      name\n      code\n      device\n      description\n      isActive\n      queued\n      updatedAt\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateToken($attributes: TokenAttributes!) {\n    token: createToken(attributes: $attributes) {\n      id\n      clientToken\n      clientSecret\n      expiresAt\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateToken($attributes: TokenAttributes!) {\n    token: createToken(attributes: $attributes) {\n      id\n      clientToken\n      clientSecret\n      expiresAt\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveToken($id: ID!) {\n    token: removeToken(id: $id) {\n      id\n      clientToken\n      clientSecret\n      expiresAt\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveToken($id: ID!) {\n    token: removeToken(id: $id) {\n      id\n      clientToken\n      clientSecret\n      expiresAt\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateToken($id: ID!, $attributes: TokenAttributes!) {\n    token: updateToken(id: $id, attributes: $attributes) {\n      id\n      clientToken\n      clientSecret\n      expiresAt\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateToken($id: ID!, $attributes: TokenAttributes!) {\n    token: updateToken(id: $id, attributes: $attributes) {\n      id\n      clientToken\n      clientSecret\n      expiresAt\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ResendCallback($id: ID!) {\n    resendCallback(id: $id)\n  }\n"): (typeof documents)["\n  mutation ResendCallback($id: ID!) {\n    resendCallback(id: $id)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateTransaction($attributes: TransactionAttributes!) {\n    transaction: createTransaction(attributes: $attributes) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      client {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        accountNumber\n        accountName\n        code\n        bankType {\n          id\n          name\n          code\n        }\n      }\n\n      account {\n        id\n        name\n      }\n\n      walletQueue {\n        id\n      }\n\n      webpayToken {\n        id\n      }\n\n      claimReferenceNumber\n      transactionType\n      amount\n      fee\n      status\n      statusNotes\n      accountName\n      accountNumber\n      referenceCode\n      referenceNumber\n      isCallbackSent\n      callbackStatusSent\n      callbackStatusCode\n      callbackNotes\n      clientTransactionId\n      callbackUrl\n      redirectUrl\n      isWebpay\n      processedBy\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateTransaction($attributes: TransactionAttributes!) {\n    transaction: createTransaction(attributes: $attributes) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      client {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        accountNumber\n        accountName\n        code\n        bankType {\n          id\n          name\n          code\n        }\n      }\n\n      account {\n        id\n        name\n      }\n\n      walletQueue {\n        id\n      }\n\n      webpayToken {\n        id\n      }\n\n      claimReferenceNumber\n      transactionType\n      amount\n      fee\n      status\n      statusNotes\n      accountName\n      accountNumber\n      referenceCode\n      referenceNumber\n      isCallbackSent\n      callbackStatusSent\n      callbackStatusCode\n      callbackNotes\n      clientTransactionId\n      callbackUrl\n      redirectUrl\n      isWebpay\n      processedBy\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation TransferTransactions($walletQueueId: ID!, $transactionIds: [ID!]!) {\n    transactions: transferTransactions(walletQueueId: $walletQueueId, transactionIds: $transactionIds) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      client {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        accountNumber\n        accountName\n        code\n        bankType {\n          id\n          name\n          code\n        }\n      }\n\n      account {\n        id\n        name\n      }\n\n      walletQueue {\n        id\n      }\n\n      webpayToken {\n        id\n\n        client {\n          id\n          name\n        }\n\n        transactionRequest {\n          id\n        }\n\n        clientTransactionId\n        accountName\n        accountNumber\n        amount\n        fee\n        createdAt\n        updatedAt\n      }\n\n      claimReferenceNumber\n      transactionType\n      amount\n      fee\n      status\n      statusNotes\n      accountName\n      accountNumber\n      referenceCode\n      referenceNumber\n      isCallbackSent\n      callbackStatusSent\n      callbackStatusCode\n      callbackNotes\n      clientTransactionId\n      callbackUrl\n      redirectUrl\n      isWebpay\n      processedBy\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation TransferTransactions($walletQueueId: ID!, $transactionIds: [ID!]!) {\n    transactions: transferTransactions(walletQueueId: $walletQueueId, transactionIds: $transactionIds) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      client {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        accountNumber\n        accountName\n        code\n        bankType {\n          id\n          name\n          code\n        }\n      }\n\n      account {\n        id\n        name\n      }\n\n      walletQueue {\n        id\n      }\n\n      webpayToken {\n        id\n\n        client {\n          id\n          name\n        }\n\n        transactionRequest {\n          id\n        }\n\n        clientTransactionId\n        accountName\n        accountNumber\n        amount\n        fee\n        createdAt\n        updatedAt\n      }\n\n      claimReferenceNumber\n      transactionType\n      amount\n      fee\n      status\n      statusNotes\n      accountName\n      accountNumber\n      referenceCode\n      referenceNumber\n      isCallbackSent\n      callbackStatusSent\n      callbackStatusCode\n      callbackNotes\n      clientTransactionId\n      callbackUrl\n      redirectUrl\n      isWebpay\n      processedBy\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateTransaction($id: ID!, $attributes: TransactionAttributes!) {\n    transaction: updateTransaction(id: $id, attributes: $attributes) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      client {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        accountNumber\n        accountName\n        code\n        bankType {\n          id\n          name\n          code\n        }\n      }\n\n      account {\n        id\n        name\n      }\n\n      walletQueue {\n        id\n      }\n\n      webpayToken {\n        id\n      }\n\n      claimReferenceNumber\n      transactionType\n      amount\n      fee\n      status\n      statusNotes\n      accountName\n      accountNumber\n      referenceCode\n      referenceNumber\n      isCallbackSent\n      callbackStatusSent\n      callbackStatusCode\n      callbackNotes\n      clientTransactionId\n      callbackUrl\n      redirectUrl\n      isWebpay\n      processedBy\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateTransaction($id: ID!, $attributes: TransactionAttributes!) {\n    transaction: updateTransaction(id: $id, attributes: $attributes) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      client {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        accountNumber\n        accountName\n        code\n        bankType {\n          id\n          name\n          code\n        }\n      }\n\n      account {\n        id\n        name\n      }\n\n      walletQueue {\n        id\n      }\n\n      webpayToken {\n        id\n      }\n\n      claimReferenceNumber\n      transactionType\n      amount\n      fee\n      status\n      statusNotes\n      accountName\n      accountNumber\n      referenceCode\n      referenceNumber\n      isCallbackSent\n      callbackStatusSent\n      callbackStatusCode\n      callbackNotes\n      clientTransactionId\n      callbackUrl\n      redirectUrl\n      isWebpay\n      processedBy\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateUserType($attributes: UserTypeAttributes!) {\n    userType: createUserType(attributes: $attributes) {\n      id\n      code\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateUserType($attributes: UserTypeAttributes!) {\n    userType: createUserType(attributes: $attributes) {\n      id\n      code\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveUserType($id: ID!) {\n    userType: removeUserType(id: $id) {\n      id\n      code\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveUserType($id: ID!) {\n    userType: removeUserType(id: $id) {\n      id\n      code\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateUserType($id: ID!, $attributes: UserTypeAttributes!) {\n    userType: updateUserType(id: $id, attributes: $attributes) {\n      id\n      code\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUserType($id: ID!, $attributes: UserTypeAttributes!) {\n    userType: updateUserType(id: $id, attributes: $attributes) {\n      id\n      code\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateUser($attributes: UserAttributes!) {\n    user: createUser(attributes: $attributes) {\n      id\n\n      userType {\n        id\n        code\n        name\n      }\n\n      branch {\n        id\n        code\n        name\n      }\n\n      username\n      firstName\n      lastName\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateUser($attributes: UserAttributes!) {\n    user: createUser(attributes: $attributes) {\n      id\n\n      userType {\n        id\n        code\n        name\n      }\n\n      branch {\n        id\n        code\n        name\n      }\n\n      username\n      firstName\n      lastName\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveUser($id: ID!) {\n    user: removeUser(id: $id) {\n      id\n\n      userType {\n        id\n        code\n        name\n      }\n\n      branch {\n        id\n        code\n        name\n      }\n\n      username\n      firstName\n      lastName\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveUser($id: ID!) {\n    user: removeUser(id: $id) {\n      id\n\n      userType {\n        id\n        code\n        name\n      }\n\n      branch {\n        id\n        code\n        name\n      }\n\n      username\n      firstName\n      lastName\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateUser($id: ID!, $attributes: UserAttributes!) {\n    user: updateUser(id: $id, attributes: $attributes) {\n      id\n\n      userType {\n        id\n        code\n        name\n      }\n\n      branch {\n        id\n        code\n        name\n      }\n\n      username\n      firstName\n      lastName\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUser($id: ID!, $attributes: UserAttributes!) {\n    user: updateUser(id: $id, attributes: $attributes) {\n      id\n\n      userType {\n        id\n        code\n        name\n      }\n\n      branch {\n        id\n        code\n        name\n      }\n\n      username\n      firstName\n      lastName\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateWalletQueueItem($attributes: WalletQueueItemAttributes!) {\n    walletQueueItem: createWalletQueueItem(attributes: $attributes) {\n      id\n\n      walletQueue {\n        id\n        code\n        queueType\n        bank {\n          id\n          code\n          bankType {\n            id\n            code\n          }\n        }\n      }\n\n      matchedTransaction {\n        id\n      }\n\n      linkedWalletQueueItem {\n        id\n      }\n\n      transactionType\n      amount\n      accountNumber\n      accountName\n      referenceNumber\n      balance\n      code\n      transactionDate\n      status\n      notes\n      remarks\n      processedBy\n      createdAt\n      updatedAt\n\n      attachment {\n        id\n        url\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateWalletQueueItem($attributes: WalletQueueItemAttributes!) {\n    walletQueueItem: createWalletQueueItem(attributes: $attributes) {\n      id\n\n      walletQueue {\n        id\n        code\n        queueType\n        bank {\n          id\n          code\n          bankType {\n            id\n            code\n          }\n        }\n      }\n\n      matchedTransaction {\n        id\n      }\n\n      linkedWalletQueueItem {\n        id\n      }\n\n      transactionType\n      amount\n      accountNumber\n      accountName\n      referenceNumber\n      balance\n      code\n      transactionDate\n      status\n      notes\n      remarks\n      processedBy\n      createdAt\n      updatedAt\n\n      attachment {\n        id\n        url\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveWalletQueueItem($id: ID!) {\n    walletQueueItem: removeWalletQueueItem(id: $id) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveWalletQueueItem($id: ID!) {\n    walletQueueItem: removeWalletQueueItem(id: $id) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateWalletQueueItem($id: ID!, $attributes: WalletQueueItemAttributes!) {\n    walletQueueItem: updateWalletQueueItem(id: $id, attributes: $attributes) {\n      id\n\n      walletQueue {\n        id\n        code\n        queueType\n        bank {\n          id\n          code\n          bankType {\n            id\n            code\n          }\n        }\n      }\n\n      matchedTransaction {\n        id\n      }\n\n      linkedWalletQueueItem {\n        id\n      }\n\n      transactionType\n      amount\n      accountNumber\n      accountName\n      referenceNumber\n      balance\n      code\n      transactionDate\n      status\n      notes\n      remarks\n      processedBy\n      createdAt\n      updatedAt\n\n      attachment {\n        id\n        url\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateWalletQueueItem($id: ID!, $attributes: WalletQueueItemAttributes!) {\n    walletQueueItem: updateWalletQueueItem(id: $id, attributes: $attributes) {\n      id\n\n      walletQueue {\n        id\n        code\n        queueType\n        bank {\n          id\n          code\n          bankType {\n            id\n            code\n          }\n        }\n      }\n\n      matchedTransaction {\n        id\n      }\n\n      linkedWalletQueueItem {\n        id\n      }\n\n      transactionType\n      amount\n      accountNumber\n      accountName\n      referenceNumber\n      balance\n      code\n      transactionDate\n      status\n      notes\n      remarks\n      processedBy\n      createdAt\n      updatedAt\n\n      attachment {\n        id\n        url\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateWalletQueue($attributes: WalletQueueAttributes!) {\n    walletQueue: createWalletQueue(attributes: $attributes) {\n      id\n      code\n\n      branch {\n        id\n        code\n      }\n\n      bank {\n        id\n        code\n        phone\n        accountNumber\n        accountName\n        walletLimit\n        remainingLimit\n        phone\n        purpose\n\n        bankType {\n          code\n        }\n      }\n\n      clients {\n        id\n        code\n        name\n      }\n\n      queueType\n      startingBalance\n      endingBalance\n      totalAmount\n      totalSuccess\n      totalTransferIn\n      totalTransferOut\n      totalQueueAmount\n      queuedBy\n      processedBy\n      confirmedBy\n      notes\n      queue\n      isActive\n      interval\n      intervalCounter\n      intervalCounterLimit\n      intervalCountdown\n      status\n      isLocked\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateWalletQueue($attributes: WalletQueueAttributes!) {\n    walletQueue: createWalletQueue(attributes: $attributes) {\n      id\n      code\n\n      branch {\n        id\n        code\n      }\n\n      bank {\n        id\n        code\n        phone\n        accountNumber\n        accountName\n        walletLimit\n        remainingLimit\n        phone\n        purpose\n\n        bankType {\n          code\n        }\n      }\n\n      clients {\n        id\n        code\n        name\n      }\n\n      queueType\n      startingBalance\n      endingBalance\n      totalAmount\n      totalSuccess\n      totalTransferIn\n      totalTransferOut\n      totalQueueAmount\n      queuedBy\n      processedBy\n      confirmedBy\n      notes\n      queue\n      isActive\n      interval\n      intervalCounter\n      intervalCounterLimit\n      intervalCountdown\n      status\n      isLocked\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RecomputeWalletQueue($id: ID!) {\n    walletQueue: recomputeWalletQueue(id: $id) {\n      id\n      code\n\n      branch {\n        id\n        code\n      }\n\n      bank {\n        id\n        code\n        phone\n        accountNumber\n        accountName\n        walletLimit\n        remainingLimit\n        phone\n        purpose\n\n        bankType {\n          code\n        }\n      }\n\n      clients {\n        id\n        code\n        name\n      }\n\n      queueType\n      startingBalance\n      endingBalance\n      totalAmount\n      totalSuccess\n      totalTransferIn\n      totalTransferOut\n      totalQueueAmount\n      queuedBy\n      processedBy\n      confirmedBy\n      notes\n      queue\n      isActive\n      interval\n      intervalCounter\n      intervalCounterLimit\n      intervalCountdown\n      status\n      isLocked\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation RecomputeWalletQueue($id: ID!) {\n    walletQueue: recomputeWalletQueue(id: $id) {\n      id\n      code\n\n      branch {\n        id\n        code\n      }\n\n      bank {\n        id\n        code\n        phone\n        accountNumber\n        accountName\n        walletLimit\n        remainingLimit\n        phone\n        purpose\n\n        bankType {\n          code\n        }\n      }\n\n      clients {\n        id\n        code\n        name\n      }\n\n      queueType\n      startingBalance\n      endingBalance\n      totalAmount\n      totalSuccess\n      totalTransferIn\n      totalTransferOut\n      totalQueueAmount\n      queuedBy\n      processedBy\n      confirmedBy\n      notes\n      queue\n      isActive\n      interval\n      intervalCounter\n      intervalCounterLimit\n      intervalCountdown\n      status\n      isLocked\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation removeWalletQueue($id: ID!) {\n    walletQueue: removeWalletQueue(id: $id) {\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation removeWalletQueue($id: ID!) {\n    walletQueue: removeWalletQueue(id: $id) {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateWalletQueue($id: ID!, $attributes: WalletQueueAttributes!) {\n    walletQueue: updateWalletQueue(id: $id, attributes: $attributes) {\n      id\n      code\n\n      branch {\n        id\n        code\n      }\n\n      bank {\n        id\n        code\n        phone\n        accountNumber\n        accountName\n        walletLimit\n        remainingLimit\n        phone\n        purpose\n\n        bankType {\n          code\n        }\n      }\n\n      clients {\n        id\n        code\n        name\n      }\n\n      queueType\n      startingBalance\n      endingBalance\n      totalAmount\n      totalSuccess\n      totalTransferIn\n      totalTransferOut\n      totalQueueAmount\n      queuedBy\n      processedBy\n      confirmedBy\n      notes\n      queue\n      isActive\n      interval\n      intervalCounter\n      intervalCounterLimit\n      intervalCountdown\n      status\n      isLocked\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateWalletQueue($id: ID!, $attributes: WalletQueueAttributes!) {\n    walletQueue: updateWalletQueue(id: $id, attributes: $attributes) {\n      id\n      code\n\n      branch {\n        id\n        code\n      }\n\n      bank {\n        id\n        code\n        phone\n        accountNumber\n        accountName\n        walletLimit\n        remainingLimit\n        phone\n        purpose\n\n        bankType {\n          code\n        }\n      }\n\n      clients {\n        id\n        code\n        name\n      }\n\n      queueType\n      startingBalance\n      endingBalance\n      totalAmount\n      totalSuccess\n      totalTransferIn\n      totalTransferOut\n      totalQueueAmount\n      queuedBy\n      processedBy\n      confirmedBy\n      notes\n      queue\n      isActive\n      interval\n      intervalCounter\n      intervalCounterLimit\n      intervalCountdown\n      status\n      isLocked\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateWhitelistedIp($attributes: WhitelistedIpAttributes!) {\n    whitelistedIp: createWhitelistedIp(attributes: $attributes) {\n      id\n\n      client {\n        id\n        name\n      }\n\n      ipAddress\n      isAllowed\n      description\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateWhitelistedIp($attributes: WhitelistedIpAttributes!) {\n    whitelistedIp: createWhitelistedIp(attributes: $attributes) {\n      id\n\n      client {\n        id\n        name\n      }\n\n      ipAddress\n      isAllowed\n      description\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveWhitelistedIp($id: ID!) {\n    whitelistedIp: removeWhitelistedIp(id: $id) {\n      id\n\n      client {\n        id\n        name\n      }\n\n      ipAddress\n      isAllowed\n      description\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveWhitelistedIp($id: ID!) {\n    whitelistedIp: removeWhitelistedIp(id: $id) {\n      id\n\n      client {\n        id\n        name\n      }\n\n      ipAddress\n      isAllowed\n      description\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateWhitelistedIp($id: ID!, $attributes: WhitelistedIpAttributes!) {\n    whitelistedIp: updateWhitelistedIp(id: $id, attributes: $attributes) {\n      id\n\n      client {\n        id\n        name\n      }\n\n      ipAddress\n      isAllowed\n      description\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateWhitelistedIp($id: ID!, $attributes: WhitelistedIpAttributes!) {\n    whitelistedIp: updateWhitelistedIp(id: $id, attributes: $attributes) {\n      id\n\n      client {\n        id\n        name\n      }\n\n      ipAddress\n      isAllowed\n      description\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query CurrentUser {\n    user: fetchCurrentUser {\n      id\n      username\n      email\n      firstName\n      lastName\n\n      userType {\n        id\n        code\n        name\n      }\n\n      branchId\n      clientId\n    }\n  }\n"): (typeof documents)["\n  query CurrentUser {\n    user: fetchCurrentUser {\n      id\n      username\n      email\n      firstName\n      lastName\n\n      userType {\n        id\n        code\n        name\n      }\n\n      branchId\n      clientId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchBankTransfer($id: ID!) {\n    bankTransfer: fetchBankTransfer(id: $id) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        code\n        accountName\n        accountNumber\n\n        bankType {\n          code\n        }\n      }\n\n      confirmedBy\n      isConfirmed\n\n      walletQueue {\n        id\n        code\n      }\n\n      transactionBank {\n        id\n        code\n        accountName\n        accountNumber\n\n        bankType {\n          code\n        }\n      }\n\n      amount\n      fee\n\n      transactionDate\n\n      sentRef\n      recvRef\n\n      transactionType\n      purpose\n      notes\n\n      attachments {\n        id\n        attachableType\n        attachableId\n        filename\n        url\n      }\n\n      walletQueue {\n        id\n        code\n      }\n\n      createdAt\n      updatedAt\n\n      inverseTransfer {\n        id\n\n        branch {\n          id\n          code\n          name\n        }\n\n        bank {\n          id\n          code\n          accountName\n          accountNumber\n\n          bankType {\n            code\n          }\n        }\n\n        confirmedBy\n        isConfirmed\n\n        walletQueue {\n          id\n          code\n        }\n\n        transactionBank {\n          id\n          code\n          accountName\n          accountNumber\n\n          bankType {\n            code\n          }\n        }\n\n        amount\n        fee\n\n        transactionDate\n\n        sentRef\n        recvRef\n\n        transactionType\n        purpose\n        notes\n\n        attachments {\n          id\n          attachableType\n          attachableId\n          filename\n          url\n        }\n\n        walletQueue {\n          id\n          code\n        }\n\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchBankTransfer($id: ID!) {\n    bankTransfer: fetchBankTransfer(id: $id) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        code\n        accountName\n        accountNumber\n\n        bankType {\n          code\n        }\n      }\n\n      confirmedBy\n      isConfirmed\n\n      walletQueue {\n        id\n        code\n      }\n\n      transactionBank {\n        id\n        code\n        accountName\n        accountNumber\n\n        bankType {\n          code\n        }\n      }\n\n      amount\n      fee\n\n      transactionDate\n\n      sentRef\n      recvRef\n\n      transactionType\n      purpose\n      notes\n\n      attachments {\n        id\n        attachableType\n        attachableId\n        filename\n        url\n      }\n\n      walletQueue {\n        id\n        code\n      }\n\n      createdAt\n      updatedAt\n\n      inverseTransfer {\n        id\n\n        branch {\n          id\n          code\n          name\n        }\n\n        bank {\n          id\n          code\n          accountName\n          accountNumber\n\n          bankType {\n            code\n          }\n        }\n\n        confirmedBy\n        isConfirmed\n\n        walletQueue {\n          id\n          code\n        }\n\n        transactionBank {\n          id\n          code\n          accountName\n          accountNumber\n\n          bankType {\n            code\n          }\n        }\n\n        amount\n        fee\n\n        transactionDate\n\n        sentRef\n        recvRef\n\n        transactionType\n        purpose\n        notes\n\n        attachments {\n          id\n          attachableType\n          attachableId\n          filename\n          url\n        }\n\n        walletQueue {\n          id\n          code\n        }\n\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchBankTransfers($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    bankTransfers: fetchBankTransfers(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        branch {\n          id\n          code\n          name\n        }\n\n        bank {\n          id\n          code\n          accountName\n          accountNumber\n\n          bankType {\n            code\n          }\n        }\n\n        confirmedBy\n        isConfirmed\n\n        walletQueue {\n          id\n          code\n        }\n\n        transactionBank {\n          id\n          code\n          accountName\n          accountNumber\n\n          bankType {\n            code\n          }\n        }\n\n        amount\n        fee\n\n        transactionDate\n\n        sentRef\n        recvRef\n\n        transactionType\n        purpose\n        notes\n\n        attachments {\n          id\n          attachableType\n          attachableId\n          filename\n          url\n        }\n\n        walletQueue {\n          id\n          code\n        }\n\n        createdAt\n        updatedAt\n\n        inverseTransfer {\n          id\n\n          branch {\n            id\n            code\n            name\n          }\n\n          bank {\n            id\n            code\n            accountName\n            accountNumber\n\n            bankType {\n              code\n            }\n          }\n\n          confirmedBy\n          isConfirmed\n\n          walletQueue {\n            id\n            code\n          }\n\n          transactionBank {\n            id\n            code\n            accountName\n            accountNumber\n\n            bankType {\n              code\n            }\n          }\n\n          amount\n          fee\n\n          transactionDate\n\n          sentRef\n          recvRef\n\n          transactionType\n          purpose\n          notes\n\n          attachments {\n            id\n            attachableType\n            attachableId\n            filename\n            url\n          }\n\n          walletQueue {\n            id\n            code\n          }\n\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchBankTransfers($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    bankTransfers: fetchBankTransfers(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        branch {\n          id\n          code\n          name\n        }\n\n        bank {\n          id\n          code\n          accountName\n          accountNumber\n\n          bankType {\n            code\n          }\n        }\n\n        confirmedBy\n        isConfirmed\n\n        walletQueue {\n          id\n          code\n        }\n\n        transactionBank {\n          id\n          code\n          accountName\n          accountNumber\n\n          bankType {\n            code\n          }\n        }\n\n        amount\n        fee\n\n        transactionDate\n\n        sentRef\n        recvRef\n\n        transactionType\n        purpose\n        notes\n\n        attachments {\n          id\n          attachableType\n          attachableId\n          filename\n          url\n        }\n\n        walletQueue {\n          id\n          code\n        }\n\n        createdAt\n        updatedAt\n\n        inverseTransfer {\n          id\n\n          branch {\n            id\n            code\n            name\n          }\n\n          bank {\n            id\n            code\n            accountName\n            accountNumber\n\n            bankType {\n              code\n            }\n          }\n\n          confirmedBy\n          isConfirmed\n\n          walletQueue {\n            id\n            code\n          }\n\n          transactionBank {\n            id\n            code\n            accountName\n            accountNumber\n\n            bankType {\n              code\n            }\n          }\n\n          amount\n          fee\n\n          transactionDate\n\n          sentRef\n          recvRef\n\n          transactionType\n          purpose\n          notes\n\n          attachments {\n            id\n            attachableType\n            attachableId\n            filename\n            url\n          }\n\n          walletQueue {\n            id\n            code\n          }\n\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchBankType($id: ID!) {\n    bankType: fetchBankType(id: $id) {\n      id\n      code\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query FetchBankType($id: ID!) {\n    bankType: fetchBankType(id: $id) {\n      id\n      code\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchBankTypes($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    bankTypes: fetchBankTypes(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        code\n        name\n        description\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchBankTypes($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    bankTypes: fetchBankTypes(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        code\n        name\n        description\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchBank($id: ID!) {\n    bank: fetchBank(id: $id) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      bankType {\n        id\n        code\n        name\n      }\n\n      activeWalletQueue {\n        id\n        code\n      }\n\n      code\n      phone\n      slot\n      merchantName\n      accountName\n      accountNumber\n      password\n      purpose\n      description\n      walletLimit\n      remainingLimit\n      isProcessor\n      isActive\n      isExternal\n      isAllowed\n      balance\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query FetchBank($id: ID!) {\n    bank: fetchBank(id: $id) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      bankType {\n        id\n        code\n        name\n      }\n\n      activeWalletQueue {\n        id\n        code\n      }\n\n      code\n      phone\n      slot\n      merchantName\n      accountName\n      accountNumber\n      password\n      purpose\n      description\n      walletLimit\n      remainingLimit\n      isProcessor\n      isActive\n      isExternal\n      isAllowed\n      balance\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchBanks($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    banks: fetchBanks(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        branch {\n          id\n          code\n          name\n        }\n\n        bankType {\n          id\n          code\n          name\n        }\n\n        activeWalletQueue {\n          id\n          code\n        }\n\n        code\n        phone\n        slot\n        merchantName\n        accountName\n        accountNumber\n        password\n        purpose\n        description\n        walletLimit\n        remainingLimit\n        isProcessor\n        isActive\n        isExternal\n        isAllowed\n        balance\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchBanks($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    banks: fetchBanks(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        branch {\n          id\n          code\n          name\n        }\n\n        bankType {\n          id\n          code\n          name\n        }\n\n        activeWalletQueue {\n          id\n          code\n        }\n\n        code\n        phone\n        slot\n        merchantName\n        accountName\n        accountNumber\n        password\n        purpose\n        description\n        walletLimit\n        remainingLimit\n        isProcessor\n        isActive\n        isExternal\n        isAllowed\n        balance\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchBranch($id: ID!) {\n    branch: fetchBranch(id: $id) {\n      id\n      code\n      name\n      description\n      contactPerson\n      contactNumber\n      contactEmail\n      depositQueue\n      depositQueueMultiplier\n      withdrawQueue\n      withdrawQueueMultiplier\n      balance\n      createdAt\n      updatedAt\n\n      options {\n        id\n        fieldName\n        value\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchBranch($id: ID!) {\n    branch: fetchBranch(id: $id) {\n      id\n      code\n      name\n      description\n      contactPerson\n      contactNumber\n      contactEmail\n      depositQueue\n      depositQueueMultiplier\n      withdrawQueue\n      withdrawQueueMultiplier\n      balance\n      createdAt\n      updatedAt\n\n      options {\n        id\n        fieldName\n        value\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchBranches($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    branches: fetchBranches(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        code\n        name\n        description\n        contactPerson\n        contactNumber\n        contactEmail\n        depositQueue\n        depositQueueMultiplier\n        withdrawQueue\n        withdrawQueueMultiplier\n        balance\n        createdAt\n        updatedAt\n\n        options {\n          id\n          fieldName\n          value\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchBranches($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    branches: fetchBranches(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        code\n        name\n        description\n        contactPerson\n        contactNumber\n        contactEmail\n        depositQueue\n        depositQueueMultiplier\n        withdrawQueue\n        withdrawQueueMultiplier\n        balance\n        createdAt\n        updatedAt\n\n        options {\n          id\n          fieldName\n          value\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchClientToken($id: ID!) {\n    clientToken: fetchClientToken(id: $id) {\n      id\n\n      client {\n        id\n        name\n      }\n\n      token {\n        id\n        clientToken\n        clientSecret\n        expiresAt\n      }\n\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query FetchClientToken($id: ID!) {\n    clientToken: fetchClientToken(id: $id) {\n      id\n\n      client {\n        id\n        name\n      }\n\n      token {\n        id\n        clientToken\n        clientSecret\n        expiresAt\n      }\n\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchClientTokens($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    clientTokens: fetchClientTokens(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        client {\n          id\n          name\n        }\n\n        token {\n          id\n          clientToken\n          clientSecret\n          expiresAt\n        }\n\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchClientTokens($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    clientTokens: fetchClientTokens(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        client {\n          id\n          name\n        }\n\n        token {\n          id\n          clientToken\n          clientSecret\n          expiresAt\n        }\n\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchClient($id: ID!) {\n    client: fetchClient(id: $id) {\n      id\n      code\n      name\n      description\n      minDeposit\n      maxDeposit\n      minWithdraw\n      maxWithdraw\n      currency\n      depositRate\n      withdrawRate\n      depositCommission\n      withdrawCommission\n      isActive\n      enableDeposit\n      enableWithdraw\n      callbackUrl\n      redirectUrl\n      isSingleCallback\n      isAutoCallback\n      totalDeposit\n      totalWithdraw\n      totalDepositFee\n      totalWithdrawFee\n      totalTopup\n      totalSettlement\n      totalBalance\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query FetchClient($id: ID!) {\n    client: fetchClient(id: $id) {\n      id\n      code\n      name\n      description\n      minDeposit\n      maxDeposit\n      minWithdraw\n      maxWithdraw\n      currency\n      depositRate\n      withdrawRate\n      depositCommission\n      withdrawCommission\n      isActive\n      enableDeposit\n      enableWithdraw\n      callbackUrl\n      redirectUrl\n      isSingleCallback\n      isAutoCallback\n      totalDeposit\n      totalWithdraw\n      totalDepositFee\n      totalWithdrawFee\n      totalTopup\n      totalSettlement\n      totalBalance\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchClients($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    clients: fetchClients(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        code\n        name\n        description\n        minDeposit\n        maxDeposit\n        minWithdraw\n        maxWithdraw\n        currency\n        depositRate\n        withdrawRate\n        depositCommission\n        withdrawCommission\n        isActive\n        enableDeposit\n        enableWithdraw\n        callbackUrl\n        redirectUrl\n        isSingleCallback\n        isAutoCallback\n        totalDeposit\n        totalWithdraw\n        totalDepositFee\n        totalWithdrawFee\n        totalTopup\n        totalSettlement\n        totalBalance\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchClients($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    clients: fetchClients(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        code\n        name\n        description\n        minDeposit\n        maxDeposit\n        minWithdraw\n        maxWithdraw\n        currency\n        depositRate\n        withdrawRate\n        depositCommission\n        withdrawCommission\n        isActive\n        enableDeposit\n        enableWithdraw\n        callbackUrl\n        redirectUrl\n        isSingleCallback\n        isAutoCallback\n        totalDeposit\n        totalWithdraw\n        totalDepositFee\n        totalWithdrawFee\n        totalTopup\n        totalSettlement\n        totalBalance\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchClientDashboard {\n    dashboard: fetchClientDashboard\n  }\n"): (typeof documents)["\n  query FetchClientDashboard {\n    dashboard: fetchClientDashboard\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchOption($id: ID!) {\n    option: fetchOption(id: $id) {\n      id\n      optionableId\n      optionableType\n      fieldName\n      value\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query FetchOption($id: ID!) {\n    option: fetchOption(id: $id) {\n      id\n      optionableId\n      optionableType\n      fieldName\n      value\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchOptions($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    options: fetchOptions(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        optionableType\n        optionableId\n        fieldName\n        value\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchOptions($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    options: fetchOptions(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        optionableType\n        optionableId\n        fieldName\n        value\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchSettlement($id: ID!) {\n    settlement: fetchSettlement(id: $id) {\n      id\n      client {\n        id\n        code\n        name\n      }\n      startsAt\n      endsAt\n      totalDeposit\n      totalWithdraw\n      depositRate\n      withdrawRate\n      depositFee\n      withdrawFee\n      totalSettlement\n      status\n      sent\n      balance\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query FetchSettlement($id: ID!) {\n    settlement: fetchSettlement(id: $id) {\n      id\n      client {\n        id\n        code\n        name\n      }\n      startsAt\n      endsAt\n      totalDeposit\n      totalWithdraw\n      depositRate\n      withdrawRate\n      depositFee\n      withdrawFee\n      totalSettlement\n      status\n      sent\n      balance\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchSettlements($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    settlements: fetchSettlements(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        client {\n          id\n          code\n          name\n        }\n\n        startsAt\n        endsAt\n        totalDeposit\n        totalWithdraw\n        depositRate\n        withdrawRate\n        depositFee\n        withdrawFee\n        totalSettlement\n        status\n        sent\n        balance\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchSettlements($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    settlements: fetchSettlements(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        client {\n          id\n          code\n          name\n        }\n\n        startsAt\n        endsAt\n        totalDeposit\n        totalWithdraw\n        depositRate\n        withdrawRate\n        depositFee\n        withdrawFee\n        totalSettlement\n        status\n        sent\n        balance\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchSimCard($id: ID!) {\n    simCard: fetchSimCard(id: $id) {\n      id\n\n      branch {\n        id\n        name\n      }\n\n      name\n      mobileNumber\n      network\n      slot\n      isActive\n      lastLoadDate\n\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query FetchSimCard($id: ID!) {\n    simCard: fetchSimCard(id: $id) {\n      id\n\n      branch {\n        id\n        name\n      }\n\n      name\n      mobileNumber\n      network\n      slot\n      isActive\n      lastLoadDate\n\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchSimCards($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    simCards: fetchSimCards(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        branch {\n          id\n          name\n        }\n\n        name\n        mobileNumber\n        network\n        slot\n        isActive\n        lastLoadDate\n\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchSimCards($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    simCards: fetchSimCards(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        branch {\n          id\n          name\n        }\n\n        name\n        mobileNumber\n        network\n        slot\n        isActive\n        lastLoadDate\n\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchSmsMessage($id: ID!) {\n    message: fetchSmsMessage(id: $id) {\n      id\n      smsNode {\n        id\n        code\n      }\n      client {\n        id\n        name\n        code\n      }\n      message\n      mobileNumber\n      sentAt\n      scheduledAt\n      status\n      isInstant\n      retries\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  query FetchSmsMessage($id: ID!) {\n    message: fetchSmsMessage(id: $id) {\n      id\n      smsNode {\n        id\n        code\n      }\n      client {\n        id\n        name\n        code\n      }\n      message\n      mobileNumber\n      sentAt\n      scheduledAt\n      status\n      isInstant\n      retries\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchSmsMessages($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    smsMessages: fetchSmsMessages(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        smsNode {\n          id\n          code\n        }\n        client {\n          id\n          name\n          code\n        }\n        message\n        mobileNumber\n        sentAt\n        scheduledAt\n        status\n        isInstant\n        retries\n        createdAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchSmsMessages($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    smsMessages: fetchSmsMessages(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        smsNode {\n          id\n          code\n        }\n        client {\n          id\n          name\n          code\n        }\n        message\n        mobileNumber\n        sentAt\n        scheduledAt\n        status\n        isInstant\n        retries\n        createdAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchSmsNode($id: ID!) {\n    smsNode: fetchSmsNode(id: $id) {\n      id\n      name\n      code\n      device\n      description\n      isActive\n      queued\n      updatedAt\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  query FetchSmsNode($id: ID!) {\n    smsNode: fetchSmsNode(id: $id) {\n      id\n      name\n      code\n      device\n      description\n      isActive\n      queued\n      updatedAt\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchSmsNodes($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    smsNodes: fetchSmsNodes(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        name\n        code\n        device\n        description\n        isActive\n        queued\n        updatedAt\n        createdAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchSmsNodes($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    smsNodes: fetchSmsNodes(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        name\n        code\n        device\n        description\n        isActive\n        queued\n        updatedAt\n        createdAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchToken($id: ID!) {\n    token: fetchToken(id: $id) {\n      id\n      clientToken\n      clientSecret\n      expiresAt\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query FetchToken($id: ID!) {\n    token: fetchToken(id: $id) {\n      id\n      clientToken\n      clientSecret\n      expiresAt\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchTokens($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    tokens: fetchTokens(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        clientToken\n        clientSecret\n        expiresAt\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchTokens($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    tokens: fetchTokens(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        clientToken\n        clientSecret\n        expiresAt\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchTransactionCallback($id: ID!) {\n    transactionCallback: fetchTransactionCallback(id: $id) {\n      id\n      url\n      requestBody\n      responseCode\n      responseBody\n      sender\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query FetchTransactionCallback($id: ID!) {\n    transactionCallback: fetchTransactionCallback(id: $id) {\n      id\n      url\n      requestBody\n      responseCode\n      responseBody\n      sender\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchTransactionCallbacks(\n    $filters: [FilterInput!]\n    $order: [OrderInput!]\n    $page: Int\n    $limit: Int\n  ) {\n    transactionCallbacks: fetchTransactionCallbacks(\n      filters: $filters\n      order: $order\n      page: $page\n      limit: $limit\n    ) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        url\n        requestBody\n        responseCode\n        responseBody\n        sender\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchTransactionCallbacks(\n    $filters: [FilterInput!]\n    $order: [OrderInput!]\n    $page: Int\n    $limit: Int\n  ) {\n    transactionCallbacks: fetchTransactionCallbacks(\n      filters: $filters\n      order: $order\n      page: $page\n      limit: $limit\n    ) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        url\n        requestBody\n        responseCode\n        responseBody\n        sender\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchTransaction($id: ID!) {\n    transaction: fetchTransaction(id: $id) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      client {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        accountNumber\n        accountName\n        code\n        bankType {\n          id\n          name\n          code\n        }\n      }\n\n      account {\n        id\n        name\n      }\n\n      walletQueue {\n        id\n        code\n      }\n\n      webpayToken {\n        id\n\n        client {\n          id\n          name\n        }\n\n        transactionRequest {\n          id\n        }\n\n        clientTransactionId\n        accountName\n        accountNumber\n        amount\n        fee\n        createdAt\n        updatedAt\n      }\n\n      claimReferenceNumber\n      transactionType\n      amount\n      fee\n      status\n      statusNotes\n      accountName\n      accountNumber\n      referenceCode\n      referenceNumber\n      isCallbackSent\n      callbackStatusSent\n      callbackStatusCode\n      callbackNotes\n      clientTransactionId\n      callbackUrl\n      redirectUrl\n      isWebpay\n      processedBy\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query FetchTransaction($id: ID!) {\n    transaction: fetchTransaction(id: $id) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      client {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        accountNumber\n        accountName\n        code\n        bankType {\n          id\n          name\n          code\n        }\n      }\n\n      account {\n        id\n        name\n      }\n\n      walletQueue {\n        id\n        code\n      }\n\n      webpayToken {\n        id\n\n        client {\n          id\n          name\n        }\n\n        transactionRequest {\n          id\n        }\n\n        clientTransactionId\n        accountName\n        accountNumber\n        amount\n        fee\n        createdAt\n        updatedAt\n      }\n\n      claimReferenceNumber\n      transactionType\n      amount\n      fee\n      status\n      statusNotes\n      accountName\n      accountNumber\n      referenceCode\n      referenceNumber\n      isCallbackSent\n      callbackStatusSent\n      callbackStatusCode\n      callbackNotes\n      clientTransactionId\n      callbackUrl\n      redirectUrl\n      isWebpay\n      processedBy\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchTransactions($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    transactions: fetchTransactions(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        branch {\n          id\n          code\n          name\n        }\n\n        client {\n          id\n          code\n          name\n        }\n\n        bank {\n          id\n          accountNumber\n          accountName\n          code\n          bankType {\n            id\n            name\n            code\n          }\n        }\n\n        account {\n          id\n          name\n        }\n\n        walletQueue {\n          id\n          code\n        }\n\n        webpayToken {\n          id\n\n          client {\n            id\n            name\n          }\n\n          transactionRequest {\n            id\n          }\n\n          clientTransactionId\n          accountName\n          accountNumber\n          amount\n          fee\n          createdAt\n          updatedAt\n        }\n\n        claimReferenceNumber\n        transactionType\n        amount\n        fee\n        status\n        statusNotes\n        accountName\n        accountNumber\n        referenceCode\n        referenceNumber\n        isCallbackSent\n        callbackStatusSent\n        callbackStatusCode\n        callbackNotes\n        clientTransactionId\n        callbackUrl\n        redirectUrl\n        isWebpay\n        processedBy\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchTransactions($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    transactions: fetchTransactions(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        branch {\n          id\n          code\n          name\n        }\n\n        client {\n          id\n          code\n          name\n        }\n\n        bank {\n          id\n          accountNumber\n          accountName\n          code\n          bankType {\n            id\n            name\n            code\n          }\n        }\n\n        account {\n          id\n          name\n        }\n\n        walletQueue {\n          id\n          code\n        }\n\n        webpayToken {\n          id\n\n          client {\n            id\n            name\n          }\n\n          transactionRequest {\n            id\n          }\n\n          clientTransactionId\n          accountName\n          accountNumber\n          amount\n          fee\n          createdAt\n          updatedAt\n        }\n\n        claimReferenceNumber\n        transactionType\n        amount\n        fee\n        status\n        statusNotes\n        accountName\n        accountNumber\n        referenceCode\n        referenceNumber\n        isCallbackSent\n        callbackStatusSent\n        callbackStatusCode\n        callbackNotes\n        clientTransactionId\n        callbackUrl\n        redirectUrl\n        isWebpay\n        processedBy\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchUserType($id: ID!) {\n    userType: fetchUserType(id: $id) {\n      id\n      code\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query FetchUserType($id: ID!) {\n    userType: fetchUserType(id: $id) {\n      id\n      code\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchUserTypes($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    userTypes: fetchUserTypes(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n      nodes {\n        id\n        code\n        name\n        description\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchUserTypes($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    userTypes: fetchUserTypes(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n      nodes {\n        id\n        code\n        name\n        description\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchUser($id: ID!) {\n    user: fetchUser(id: $id) {\n      id\n\n      userType {\n        id\n        code\n        name\n      }\n\n      branch {\n        id\n        code\n        name\n      }\n\n      username\n      firstName\n      lastName\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query FetchUser($id: ID!) {\n    user: fetchUser(id: $id) {\n      id\n\n      userType {\n        id\n        code\n        name\n      }\n\n      branch {\n        id\n        code\n        name\n      }\n\n      username\n      firstName\n      lastName\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchUsers($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    users: fetchUsers(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        userType {\n          id\n          code\n          name\n        }\n\n        branch {\n          id\n          code\n          name\n        }\n\n        username\n        firstName\n        lastName\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchUsers($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    users: fetchUsers(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        userType {\n          id\n          code\n          name\n        }\n\n        branch {\n          id\n          code\n          name\n        }\n\n        username\n        firstName\n        lastName\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchWalletQueueItem($id: ID!) {\n    walletQueueItem: fetchWalletQueueItem(id: $id) {\n      id\n\n      walletQueue {\n        id\n        code\n        queueType\n        bank {\n          id\n          code\n          bankType {\n            id\n            code\n          }\n        }\n      }\n\n      matchedTransaction {\n        id\n      }\n\n      linkedWalletQueueItem {\n        id\n      }\n\n      transactionType\n      amount\n      accountNumber\n      accountName\n      referenceNumber\n      balance\n      code\n      transactionDate\n      status\n      notes\n      remarks\n      processedBy\n      createdAt\n      updatedAt\n\n      attachment {\n        id\n        url\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchWalletQueueItem($id: ID!) {\n    walletQueueItem: fetchWalletQueueItem(id: $id) {\n      id\n\n      walletQueue {\n        id\n        code\n        queueType\n        bank {\n          id\n          code\n          bankType {\n            id\n            code\n          }\n        }\n      }\n\n      matchedTransaction {\n        id\n      }\n\n      linkedWalletQueueItem {\n        id\n      }\n\n      transactionType\n      amount\n      accountNumber\n      accountName\n      referenceNumber\n      balance\n      code\n      transactionDate\n      status\n      notes\n      remarks\n      processedBy\n      createdAt\n      updatedAt\n\n      attachment {\n        id\n        url\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchWalletQueueItems($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    walletQueueItems: fetchWalletQueueItems(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        walletQueue {\n          id\n          code\n          queueType\n          bank {\n            id\n            code\n            bankType {\n              id\n              code\n            }\n          }\n        }\n\n        matchedTransaction {\n          id\n        }\n\n        linkedWalletQueueItem {\n          id\n        }\n\n        transactionType\n        amount\n        accountNumber\n        accountName\n        referenceNumber\n        balance\n        code\n        transactionDate\n        status\n        notes\n        remarks\n        processedBy\n        createdAt\n        updatedAt\n\n        attachment {\n          id\n          url\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchWalletQueueItems($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    walletQueueItems: fetchWalletQueueItems(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        walletQueue {\n          id\n          code\n          queueType\n          bank {\n            id\n            code\n            bankType {\n              id\n              code\n            }\n          }\n        }\n\n        matchedTransaction {\n          id\n        }\n\n        linkedWalletQueueItem {\n          id\n        }\n\n        transactionType\n        amount\n        accountNumber\n        accountName\n        referenceNumber\n        balance\n        code\n        transactionDate\n        status\n        notes\n        remarks\n        processedBy\n        createdAt\n        updatedAt\n\n        attachment {\n          id\n          url\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchWalletQueue($id: ID!) {\n    walletQueue: fetchWalletQueue(id: $id) {\n      id\n      code\n\n      branch {\n        id\n        code\n      }\n\n      bank {\n        id\n        code\n        phone\n        accountNumber\n        accountName\n        walletLimit\n        remainingLimit\n        phone\n        purpose\n\n        bankType {\n          code\n        }\n      }\n\n      clients {\n        id\n        code\n        name\n      }\n\n      queueType\n      startingBalance\n      endingBalance\n      totalAmount\n      totalSuccess\n      totalTransferIn\n      totalTransferOut\n      totalQueueAmount\n      queuedBy\n      processedBy\n      confirmedBy\n      notes\n      queue\n      isActive\n      interval\n      intervalCounter\n      intervalCounterLimit\n      intervalCountdown\n      status\n      isLocked\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query FetchWalletQueue($id: ID!) {\n    walletQueue: fetchWalletQueue(id: $id) {\n      id\n      code\n\n      branch {\n        id\n        code\n      }\n\n      bank {\n        id\n        code\n        phone\n        accountNumber\n        accountName\n        walletLimit\n        remainingLimit\n        phone\n        purpose\n\n        bankType {\n          code\n        }\n      }\n\n      clients {\n        id\n        code\n        name\n      }\n\n      queueType\n      startingBalance\n      endingBalance\n      totalAmount\n      totalSuccess\n      totalTransferIn\n      totalTransferOut\n      totalQueueAmount\n      queuedBy\n      processedBy\n      confirmedBy\n      notes\n      queue\n      isActive\n      interval\n      intervalCounter\n      intervalCounterLimit\n      intervalCountdown\n      status\n      isLocked\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchWalletQueues($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    walletQueues: fetchWalletQueues(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        code\n\n        branch {\n          id\n          code\n        }\n\n        bank {\n          id\n          code\n          phone\n          accountNumber\n          accountName\n          walletLimit\n          remainingLimit\n          phone\n          purpose\n\n          bankType {\n            code\n          }\n        }\n\n        clients {\n          id\n          code\n          name\n        }\n\n        queueType\n        startingBalance\n        endingBalance\n        totalAmount\n        totalSuccess\n        totalTransferIn\n        totalTransferOut\n        totalQueueAmount\n        queuedBy\n        processedBy\n        confirmedBy\n        notes\n        queue\n        isActive\n        interval\n        intervalCounter\n        intervalCounterLimit\n        intervalCountdown\n        status\n        isLocked\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchWalletQueues($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    walletQueues: fetchWalletQueues(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n        code\n\n        branch {\n          id\n          code\n        }\n\n        bank {\n          id\n          code\n          phone\n          accountNumber\n          accountName\n          walletLimit\n          remainingLimit\n          phone\n          purpose\n\n          bankType {\n            code\n          }\n        }\n\n        clients {\n          id\n          code\n          name\n        }\n\n        queueType\n        startingBalance\n        endingBalance\n        totalAmount\n        totalSuccess\n        totalTransferIn\n        totalTransferOut\n        totalQueueAmount\n        queuedBy\n        processedBy\n        confirmedBy\n        notes\n        queue\n        isActive\n        interval\n        intervalCounter\n        intervalCounterLimit\n        intervalCountdown\n        status\n        isLocked\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchWebpayToken($id: ID!) {\n    webpayToken: fetchWebpayToken(id: $id) {\n      id\n\n      client {\n        id\n        code\n        name\n      }\n\n      transactionRequest {\n        id\n      }\n\n      merchantName\n      accountName\n      accountNumber\n      amount\n      fee\n      clientTransactionId\n      clientNotes\n      callbackUrl\n      redirectUrl\n      expiresAt\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query FetchWebpayToken($id: ID!) {\n    webpayToken: fetchWebpayToken(id: $id) {\n      id\n\n      client {\n        id\n        code\n        name\n      }\n\n      transactionRequest {\n        id\n      }\n\n      merchantName\n      accountName\n      accountNumber\n      amount\n      fee\n      clientTransactionId\n      clientNotes\n      callbackUrl\n      redirectUrl\n      expiresAt\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchWebpayTokens($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    webpayTokens: fetchWebpayTokens(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        client {\n          id\n          code\n          name\n        }\n\n        transactionRequest {\n          id\n        }\n\n        merchantName\n        accountName\n        accountNumber\n        amount\n        fee\n        clientTransactionId\n        clientNotes\n        callbackUrl\n        redirectUrl\n        expiresAt\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchWebpayTokens($filters: [FilterInput!], $order: [OrderInput!], $page: Int, $limit: Int) {\n    webpayTokens: fetchWebpayTokens(filters: $filters, order: $order, page: $page, limit: $limit) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        client {\n          id\n          code\n          name\n        }\n\n        transactionRequest {\n          id\n        }\n\n        merchantName\n        accountName\n        accountNumber\n        amount\n        fee\n        clientTransactionId\n        clientNotes\n        callbackUrl\n        redirectUrl\n        expiresAt\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchWhitelistedIp($id: ID!) {\n    whitelistedIp: fetchWhitelistedIp(id: $id) {\n      id\n\n      client {\n        id\n        name\n      }\n\n      ipAddress\n      isAllowed\n      description\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query FetchWhitelistedIp($id: ID!) {\n    whitelistedIp: fetchWhitelistedIp(id: $id) {\n      id\n\n      client {\n        id\n        name\n      }\n\n      ipAddress\n      isAllowed\n      description\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FetchWhitelistedIps(\n    $filters: [FilterInput!]\n    $order: [OrderInput!]\n    $page: Int\n    $limit: Int\n  ) {\n    whitelistedIps: fetchWhitelistedIps(\n      filters: $filters\n      order: $order\n      page: $page\n      limit: $limit\n    ) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        client {\n          id\n          name\n        }\n\n        ipAddress\n        isAllowed\n        description\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query FetchWhitelistedIps(\n    $filters: [FilterInput!]\n    $order: [OrderInput!]\n    $page: Int\n    $limit: Int\n  ) {\n    whitelistedIps: fetchWhitelistedIps(\n      filters: $filters\n      order: $order\n      page: $page\n      limit: $limit\n    ) {\n      pagination {\n        page\n        pages\n        limit\n        count\n        prev\n        next\n      }\n\n      nodes {\n        id\n\n        client {\n          id\n          name\n        }\n\n        ipAddress\n        isAllowed\n        description\n        createdAt\n        updatedAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription CreateTransactionUpdates($branchId: ID, $clientId: ID, $walletQueueId: ID) {\n    transaction: createTransactionUpdates(\n      branchId: $branchId\n      clientId: $clientId\n      walletQueueId: $walletQueueId\n    ) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      client {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        accountNumber\n        accountName\n        code\n        bankType {\n          id\n          name\n          code\n        }\n      }\n\n      account {\n        id\n        name\n      }\n\n      walletQueue {\n        id\n      }\n\n      claimReferenceNumber\n      transactionType\n      amount\n      fee\n      status\n      statusNotes\n      accountName\n      accountNumber\n      referenceCode\n      referenceNumber\n      isCallbackSent\n      callbackStatusSent\n      callbackStatusCode\n      callbackNotes\n      clientTransactionId\n      callbackUrl\n      redirectUrl\n      isWebpay\n      processedBy\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  subscription CreateTransactionUpdates($branchId: ID, $clientId: ID, $walletQueueId: ID) {\n    transaction: createTransactionUpdates(\n      branchId: $branchId\n      clientId: $clientId\n      walletQueueId: $walletQueueId\n    ) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      client {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        accountNumber\n        accountName\n        code\n        bankType {\n          id\n          name\n          code\n        }\n      }\n\n      account {\n        id\n        name\n      }\n\n      walletQueue {\n        id\n      }\n\n      claimReferenceNumber\n      transactionType\n      amount\n      fee\n      status\n      statusNotes\n      accountName\n      accountNumber\n      referenceCode\n      referenceNumber\n      isCallbackSent\n      callbackStatusSent\n      callbackStatusCode\n      callbackNotes\n      clientTransactionId\n      callbackUrl\n      redirectUrl\n      isWebpay\n      processedBy\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription FetchTransactionsUpdates($branchId: ID, $clientId: ID, $walletQueueId: ID) {\n    transaction: fetchTransactionsUpdates(\n      branchId: $branchId\n      clientId: $clientId\n      walletQueueId: $walletQueueId\n    ) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      client {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        accountNumber\n        accountName\n        code\n        bankType {\n          id\n          name\n          code\n        }\n      }\n\n      account {\n        id\n        name\n      }\n\n      walletQueue {\n        id\n      }\n\n      claimReferenceNumber\n      transactionType\n      amount\n      fee\n      status\n      statusNotes\n      accountName\n      accountNumber\n      referenceCode\n      referenceNumber\n      isCallbackSent\n      callbackStatusSent\n      callbackStatusCode\n      callbackNotes\n      clientTransactionId\n      callbackUrl\n      redirectUrl\n      isWebpay\n      processedBy\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  subscription FetchTransactionsUpdates($branchId: ID, $clientId: ID, $walletQueueId: ID) {\n    transaction: fetchTransactionsUpdates(\n      branchId: $branchId\n      clientId: $clientId\n      walletQueueId: $walletQueueId\n    ) {\n      id\n\n      branch {\n        id\n        code\n        name\n      }\n\n      client {\n        id\n        code\n        name\n      }\n\n      bank {\n        id\n        accountNumber\n        accountName\n        code\n        bankType {\n          id\n          name\n          code\n        }\n      }\n\n      account {\n        id\n        name\n      }\n\n      walletQueue {\n        id\n      }\n\n      claimReferenceNumber\n      transactionType\n      amount\n      fee\n      status\n      statusNotes\n      accountName\n      accountNumber\n      referenceCode\n      referenceNumber\n      isCallbackSent\n      callbackStatusSent\n      callbackStatusCode\n      callbackNotes\n      clientTransactionId\n      callbackUrl\n      redirectUrl\n      isWebpay\n      processedBy\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription CreateWalletQueueItemUpdates($walletQueueId: ID) {\n    walletQueueItem: createWalletQueueItemUpdates(walletQueueId: $walletQueueId) {\n      id\n\n      walletQueue {\n        id\n        code\n        queueType\n        bank {\n          id\n          code\n          bankType {\n            id\n            code\n          }\n        }\n      }\n\n      matchedTransaction {\n        id\n      }\n\n      transactionType\n      amount\n      accountNumber\n      accountName\n      referenceNumber\n      balance\n      code\n      transactionDate\n      status\n      notes\n      remarks\n      processedBy\n      createdAt\n      updatedAt\n\n      attachment {\n        id\n        url\n      }\n    }\n  }\n"): (typeof documents)["\n  subscription CreateWalletQueueItemUpdates($walletQueueId: ID) {\n    walletQueueItem: createWalletQueueItemUpdates(walletQueueId: $walletQueueId) {\n      id\n\n      walletQueue {\n        id\n        code\n        queueType\n        bank {\n          id\n          code\n          bankType {\n            id\n            code\n          }\n        }\n      }\n\n      matchedTransaction {\n        id\n      }\n\n      transactionType\n      amount\n      accountNumber\n      accountName\n      referenceNumber\n      balance\n      code\n      transactionDate\n      status\n      notes\n      remarks\n      processedBy\n      createdAt\n      updatedAt\n\n      attachment {\n        id\n        url\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription FetchWalletQueueUpdates($id: ID!) {\n    walletQueue: fetchWalletQueueUpdates(id: $id) {\n      id\n      code\n\n      branch {\n        id\n        code\n      }\n\n      bank {\n        id\n        code\n        phone\n        accountNumber\n        accountName\n        walletLimit\n        remainingLimit\n        phone\n        purpose\n\n        bankType {\n          code\n        }\n      }\n\n      clients {\n        id\n        code\n        name\n      }\n\n      queueType\n      startingBalance\n      endingBalance\n      totalAmount\n      totalSuccess\n      totalTransferIn\n      totalTransferOut\n      totalQueueAmount\n      queuedBy\n      processedBy\n      confirmedBy\n      notes\n      queue\n      isActive\n      interval\n      intervalCounter\n      intervalCounterLimit\n      intervalCountdown\n      status\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  subscription FetchWalletQueueUpdates($id: ID!) {\n    walletQueue: fetchWalletQueueUpdates(id: $id) {\n      id\n      code\n\n      branch {\n        id\n        code\n      }\n\n      bank {\n        id\n        code\n        phone\n        accountNumber\n        accountName\n        walletLimit\n        remainingLimit\n        phone\n        purpose\n\n        bankType {\n          code\n        }\n      }\n\n      clients {\n        id\n        code\n        name\n      }\n\n      queueType\n      startingBalance\n      endingBalance\n      totalAmount\n      totalSuccess\n      totalTransferIn\n      totalTransferOut\n      totalQueueAmount\n      queuedBy\n      processedBy\n      confirmedBy\n      notes\n      queue\n      isActive\n      interval\n      intervalCounter\n      intervalCounterLimit\n      intervalCountdown\n      status\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription FetchWalletQueuesUpdates($branchId: ID) {\n    walletQueue: fetchWalletQueuesUpdates(branchId: $branchId) {\n      id\n      code\n\n      branch {\n        id\n        code\n      }\n\n      bank {\n        id\n        code\n        phone\n        accountNumber\n        accountName\n        walletLimit\n        remainingLimit\n        phone\n        purpose\n\n        bankType {\n          code\n        }\n      }\n\n      clients {\n        id\n        code\n        name\n      }\n\n      queueType\n      startingBalance\n      endingBalance\n      totalAmount\n      totalSuccess\n      totalTransferIn\n      totalTransferOut\n      totalQueueAmount\n      queuedBy\n      processedBy\n      confirmedBy\n      notes\n      queue\n      isActive\n      interval\n      intervalCounter\n      intervalCounterLimit\n      intervalCountdown\n      status\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  subscription FetchWalletQueuesUpdates($branchId: ID) {\n    walletQueue: fetchWalletQueuesUpdates(branchId: $branchId) {\n      id\n      code\n\n      branch {\n        id\n        code\n      }\n\n      bank {\n        id\n        code\n        phone\n        accountNumber\n        accountName\n        walletLimit\n        remainingLimit\n        phone\n        purpose\n\n        bankType {\n          code\n        }\n      }\n\n      clients {\n        id\n        code\n        name\n      }\n\n      queueType\n      startingBalance\n      endingBalance\n      totalAmount\n      totalSuccess\n      totalTransferIn\n      totalTransferOut\n      totalQueueAmount\n      queuedBy\n      processedBy\n      confirmedBy\n      notes\n      queue\n      isActive\n      interval\n      intervalCounter\n      intervalCounterLimit\n      intervalCountdown\n      status\n      createdAt\n      updatedAt\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;